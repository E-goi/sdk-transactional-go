openapi: 3.0.1
info:
  title: Transactional API
  description: "# Introduction \n \nThis API is a service provided by [E-goi](www.e-goi.com)\
    \ to send transactional messages. \n \nTransactional Messaging is a 1-to-1 communication\
    \ channel, usually from an organization directed to a specific consumer.  \nThey\
    \ can be triggered by: \n \n* __Actions__ - The consumer interacts with the organization\
    \ (ie.: online shopping); \n* __Time__ - The consumer's actions are time-bounded\
    \ by the organization (ie.: period of inactivity). \n \nBecause of the nature\
    \ of these messages,  \nit is expected that the consumer is interested in the\
    \ content of these messages.  \nTherefore, they have a different treatment from\
    \ marketing messages, and have a higher acceptance and opening rate. \n \n>DISCLAIMER\
    \ \n> \n>Please notice that this platform is more delicate in regards to the nature\
    \ and processing of its messages. \n> \n>It should NOT be used as a mean of mass\
    \ marketing, scams, phishing or overall unruly behaviour.  \n> \n>Failure to comply\
    \ may lead to limitation of use and even termination of account. \n \n***"
  version: V2
servers:
- url: https://slingshot.egoiapp.com/api/
tags:
- name: Email
  description: "Emails can be send using the API, or using the SMTP Server.  \nThe\
    \ API should be the preferred method, as it is better documented, and have much\
    \ more functionalities. \nHowever, for simple emails, SMTP use is fine. See [below](#section/Authentication)\
    \ for its configuration. \n \nEmails are composed using different sets of information:\
    \ \n \n \nParameter | Description | Examples \n--- | --- | --- \nContacts | All\
    \ contact information. Includes main recipients well as other interested recipients.\
    \ | __To__, __Cc__, __Bcc__, __From__, __Reply-to__ \nContent | The content of\
    \ the message. Includes text (plain text or HTML) and attachments. | __Subject__,\
    \ __Body__ (HTML or Text), __Template__, __Attachments__ \nOptions | The configuration\
    \ of the email to the sender. | __Tracking__, __Registered__, __Header__, __Group/Tag__\
    \ \nStatus | The information about the message after it has been sent. | __Status__\
    \ \n \nThe Sender ___can not___ interact with the status and events.  \nHe can\
    \ only follow and check the state of the message. \n \n \nThe following is a diagram\
    \ of all the states an email can be in. \n \n![states](https://p16.f3.n0.cdn.getcloudapp.com/items/lluJKXbD/EmailStatus.png?v=f3e82040d328a8f221bc8e43e49d7e4a)\
    \ \n \n \nStatus | Description | Is Final? \n--- | --- | --- \ncreated | The message\
    \ is created | No \nqueued | The message is awayting processing | No \nprocessing\
    \ | The message is beeing processed | No \nspool | The message is beeing stored\
    \ and prepared for sending | No \nsending | The email is beeing sent | No \nfinished\
    \ | The message finishes sending | No \nsend_failed | The message failed to be\
    \ sent | Yes \nbroken | The API could not connect to the SMTP Server | Yes \n\
    delivered | The message was delivered | Yes \nrejected | The message was rejected\
    \ based on its content (rejected recipient) | Yes \nbounce_hard | The message\
    \ could not reach the recipient. Though not \"permanent\", retries should not\
    \ be attempted. | Yes \nbounce_soft | The message could not be delivered to the\
    \ recipient, but may be attempted later. | Yes \n \n# Attachments\nEmails can\
    \ have file attachments, whether inline with the email text, or as an attachment.\
    \ The maximum size for an attachment is 25Mb.\\n \n\nAttachments are a special\
    \ feature, available to those who request it. If you wish to send attachments,\
    \  \nplease contact support using the help menu on your [E-Goi Backoffice](https://bo.e-goi.com).\
    \ \n\ninline attachments should be  \nEmails can have file attachments, whether\
    \ inline with the email text, or as an attachment. The maximum size for an attachment\
    \ is 5Mb. Attachments are a special feature, available to those who request it.\
    \ If you wish to send attachments, please contact support using the help menu\
    \ on your [E-Goi Backoffice](https://bo.e-goi.com) \n\nIf you want to send an\
    \ image as an inline attachment, you should include the attachment as followed\
    \ by the documentation, with the disposition \\inline\\. Then, simply add the\
    \ following tag to your message: \n\n``<img src=\\cid:{{index}}\\/>``\n\nPlease\
    \ beware of escaping the quotation marks in the payload. The index is the position\
    \ of the image in the array of attachments, so if the attachment to include is\
    \ in position 0, then the tag should be: \n\n``<img src=\\cid:0\\/>``\n\nFiles\
    \ can be sent using the Mime Type ``x-`` namespace. However, they are considered\
    \ experimental, and mostly are used to support older software. \n\nDocuments <br>\
    \ File Type | Possible Mime Types \n:---: | :---: \n.pdf | application/pdf \n\
    .doc <br> .docx | application/msword \n.ppt <br> .pptx | application/powerpoint\
    \ <br> application/mspowerpoint \n.xls <br> .xlsx | application/excel \n.txt |\
    \ text/plain \n.html | text/html \n\nImages <br> File Type | Possible Mime Types\
    \ \n:---: | :---: \n.jpeg <br> .jpg | image/jpeg \n.png | image/png \n.gif | image/gif\
    \ \n.svg | image/svg+xml \n.bmp | application/bmp \n.psd | application/octet-stream\
    \ \n.ico | image/x-icon \n\nAudio <br> File Type | Possible Mime Types \n:---:\
    \ | :---: \n.mp3 | audio/mpeg \n.wav | audio/wav\n.midi | audio/midi \n\nVideo\
    \ <br> File Type | Possible Mime Types \n:---: | :---: \n.mp4 | video/mpeg \n\
    .avi | video/avi \n\nCompression <br> File Type | Possible Mime Types \n:---:\
    \ | :---: \n.exe | application/octet-stream \n.jar | application/java-archive\
    \ \n.tar | application/x-tar \n.zip | application/x-zip-compressed <br> application/zip\
    \ \n.rar | application/octet-stream <br> application/x-rar-compressed \n\nPlease\
    \ note that some email inboxes block certain file extensions, mostly related to\
    \ code files ( ``.vb``, ``.js``, ``.py``), shell commands (``.bat``, ``.ps1``,\
    \ ``.ksh``, ``.msh``) or executable files (``.exe``, ``.jar``, ``.apk``).  We\
    \ do not advise any attempts to send files of these nature. \n# Registered Messages\n\
    Slingshot allows its users to send emails and Sms through its API, and to keep\
    \ detailed logs from all steps of a message's lifecycle.  \nThis feature is called\
    \ Registered Message. \n \nOur records detail dates and times, sender and recipient\
    \ information, subject and content of the message and its attachments,  \nin addition\
    \ to all other events related:  \nsent, delivery, failed reception, opening and\
    \ clicks recorded - for emails. \n \nTo enable Registered Message in your account,\
    \ please get in touch with our Customer Services team,  \nthrough the HELP separator\
    \ in your e-goi interface, or simply call us. \n***\n\n# Custom Data\nIf you supply\
    \ custom data when sending (via API or SMTP),  \nevery event returned via webhooks\
    \ will contain the message related custom data.  \nThe custom data in the webhook\
    \ will be returned as it was supplied at the time of sending. An example follows.\
    \ \n \nFor instance - if you send an Sms message (via API) using the arguments:\
    \ \n \n``` \n{ \n    \"phone\": \"321-987654321\", \n    \"senderId\": \"2\",\
    \ \n    \"message\": \"An Sms message (with full utf8 support \U0001f44d\")\"\
    , \n    \"customData\": \"{\\\"meta-data\\\", \\\"my relevant metadata\\\"}\"\
    \ \n} \n``` \n \nYou will receive events with the following data (example for\
    \ the processed event): \n  \n``` \n[ \n    { \n        \"data\" : { \n      \
    \      \"recipientMobile\" : \"321-987654321\", \n            \"groupId\" : 1,\
    \ \n            \"recipientId\" : 4, \n            \"senderMobile\" : \"321-987654321\"\
    , \n            \"messageId\" : 1160, \n            \"customData\": \"{\\\"meta-data\\\
    \", \\\"my relevant metadata\\\"}\" \n            \"createDate\" : 1453430810084\
    \ \n        }, \n        \"action\" : \"processed\", \n        \"actionDate\"\
    \ : 1453430810150 \n    } \n] \n```"
- name: Sms
  description: "Sms messages are short (on average 160 char) messages that are sent\
    \ via [GSM](https://en.wikipedia.org/wiki/GSM). \n \nParameter | Description |\
    \ Examples \n--- | --- | --- \nContacts | All contact information. Includes main\
    \ recipientas well as other interested recipients. | __To__, __From__ \nContent\
    \ | The content of the message. Includes text (plain text or HTML) and attachments.\
    \ | __Body__, __Template__ \nOptions | The configuration of the email to the sender.\
    \ | __Tracking__, __Registered__, __Group/Tag__ \nStatus | The information about\
    \ the message after it has been sent. | __Status__ \n \nThe following is a diagram\
    \ of all the states an Sms can be in. \n \n![states](https://p16.f3.n0.cdn.getcloudapp.com/items/eDu14EDY/SmsStatus.png?v=7c5bd5ef2aa9f41a811c147bea2b49fa)\
    \ \n  \nStatus | Description | Is Final? \n--- | ---  | --- \ncreated | The message\
    \ was created | No \nqueued | The message has been queued for processing | No\
    \ \nprocessing | The message is beeing processed | No \nspool | The message is\
    \ awayting sending | No \nsending | The message is being sent by the phone operator\
    \  | No \nfinished | The message is being sent to the phone operator | No \nsend_failed\
    \ | The phone operator ran into an error, and the message could not be delivered\
    \ | Yes \ndelivered | The message has been successfuly delivered to the recipient\
    \ | Yes \nrejected | The message had incongruencies and will not be sent (eg.\
    \ invalid recipient) | Yes \n \n# Restrictions \nDepending on the country a phone\
    \ number belongs to, there may be some restrictions regarding message properties.\
    \ \n \nThe list only presents known restrictions. This means that everything else\
    \ should be allowed. If you find any new restriction please contact us, so that\
    \ we can change and update the list :) \n \n#### Portugal \n \nPortuguese carriers\
    \ do not allow Shortcode Sender IDs (19200). Instead, try to use either international\
    \ numeric senders (351987654321) or alphanumeric senders ('E-goi Support'). \n\
    \ \nRussian senders are filtered by portuguese network providers, so it's advised\
    \ to avoid using them. \n \nSome alphanumeric sender ID's are blocked in Portugal,\
    \ including variations in spelling. The list of Sender ID's are as follows: \n\
    * Vodafone \n* Meo \n* Optimus \n* Zon \n* PTelecom \n* Pt \n* Tmn \n* CavacoSilva\
    \ \n* Vodafone \n* PJ \n* MPublico \n* PSP \n \n#### Brazil \n \nBrazilian Carriers\
    \ are not always guarantee to support international messages. Unicode and Binary\
    \ messages are not supported. Successful delivery of concatenated messages is\
    \ not guaranteed, and is not supported by Oi Network Provider, \n \nSender ID\
    \ of a message is changed to 28908 or a local number to facilitate successful\
    \ delivery of messages. \n \nSMS containing content related to adult, alcohol,\
    \ politics or religion are not allowed, and may be blocked. \n \nSome landline\
    \ numbers maybe converted to mobile numbers, with the information being updated\
    \ once per month. \n \n#### Spain \n \nThere are no known restrictions to Spain.\
    \ However, messages with numeric Sender IDs may travel through an alternate route\
    \ to their destination, potentially increasing the time to deliver. \n \n####\
    \ Colombia \n \nIn order to successfully deliver a message, the Sender ID may\
    \ be changed to a local number (Shortcode 85307 or 87457, or long number).  \n\
    \ \nColombian network operators do not provide delivery receipts, so we can't\
    \ guarantee the message has been delivered. \n \n#### India \n \nTraffic type\
    \ | Content Allowed | Sender ID | Restrictions/Regulation \n--- | --- | --- |\
    \ --- \nDomestic transactional | Transactional traffic, OTP | 6 digit alpha (not\
    \ alphanumeric) with preregistration | The registered Alpha Sender ID will be\
    \ added with 2 letters as a prefix, depending on which carrier was used to deliver\
    \ the SMS to the final operator or 2 random numbers; e.g. MD-XXXXXX (where XXXXXX\
    \ is the registered Sender ID) \nDomestic Promotional (none opted in) | Promo/Marketing\
    \ content | Sender ID not supported and will be change to a random short code\
    \ | Promo sms will be blocked to numbers registered in ´National Do Not Call´\
    \ Registry as per TRAI regulation. <br> Promo sms are only delivered between 9am-9pm\
    \ IST time. <br> SMS outside the time range will be queued and delivered next\
    \ day. \nInternational (transactional/Opted-in Promo) | International originated\
    \ transactional content & Opt-in Promo content. (If client registered in India,but\
    \ sms originated outside India, will be identified as International traffic).\
    \ | Sender ID not supported and will be change to a random short/long virtual\
    \ number | For opted in promo sms, same Regulation apply as in for Domestic Promotional(Opted\
    \ in) listed below. \nInternational Promotional (none opted in)| NA | NA | NA\
    \ \nDomestic Promotional (opted in) | This traffic can only be routed via transactional\
    \ bind with opted in confirmations from each subscriber MSISDN | 6 digit alpha\
    \ (not alphanumeric) with pre-registration | Handling party (customer) of the\
    \ promo content must have subscriber opted in consent per each MSISDN and should\
    \ provide the information to the providers handling the traffic either upfront\
    \ or on demand in an event if the termination party gets a complaint from a mobile\
    \ operator (mobile subscriber complaining to operator for receiving a promo content)\
    \ as proof the subscriber has given consent to receive promo content. Failing\
    \ to do so (not defined the actual time period) provider will be liable for penalty\
    \ charges depend on the number of violations. Need to have contractual provisions\
    \ in order to accept the penalty charges in case of violation. \n \nAny unregistered\
    \ sender ID is overwritten with a local short code as required by Indian regulations,\
    \ whether the destination number is registered on the NDNC list or not. \n \n\
    Messages towards Jammu and Kashmir networks will be blocked by the government\
    \ due to political sensitivity. \n \nSMS containing content related to politics\
    \ during election periods are not allowed. \n*** \n# Registered Messages \nSlingshot\
    \ allows its users to send emails and Sms through its API, and to keep detailed\
    \ logs from all steps of a message's lifecycle.  \nThis feature is called Registered\
    \ Message. \n \nOur records detail dates and times, sender and recipient information,\
    \ subject and content of the message and its attachments,  \nin addition to all\
    \ other events related:  \nsent, delivery, failed reception, opening and clicks\
    \ recorded - for emails. \n \nTo enable Registered Message in your account, please\
    \ get in touch with our Customer Services team,  \nthrough the HELP separator\
    \ in your e-goi interface, or simply call us. \n***\n\n# Custom Data \nIf you\
    \ supply custom data when sending (via API or SMTP),  \nevery event returned via\
    \ webhooks will contain the message related custom data.  \nThe custom data in\
    \ the webhook will be returned as it was supplied at the time of sending. An example\
    \ follows. \n \nFor instance - if you send an Sms message (via API) using the\
    \ arguments: \n \n``` \n{ \n    \"phone\": \"321-987654321\", \n    \"senderId\"\
    : \"2\", \n    \"message\": \"An Sms message (with full utf8 support \U0001f44d\
    \")\", \n    \"customData\": \"{\\\"meta-data\\\", \\\"my relevant metadata\\\"\
    }\" \n} \n``` \n \nYou will receive events with the following data (example for\
    \ the processed event): \n  \n``` \n[ \n    { \n        \"data\" : { \n      \
    \      \"recipientMobile\" : \"321-987654321\", \n            \"groupId\" : 1,\
    \ \n            \"recipientId\" : 4, \n            \"senderMobile\" : \"321-987654321\"\
    , \n            \"messageId\" : 1160, \n            \"customData\": \"{\\\"meta-data\\\
    \", \\\"my relevant metadata\\\"}\" \n            \"createDate\" : 1453430810084\
    \ \n        }, \n        \"action\" : \"processed\", \n        \"actionDate\"\
    \ : 1453430810150 \n    } \n] \n```"
- name: SMTP
  description: "The Transactional SMTP Service consists of a simple SMTP server, listening\
    \ to SSL/TLS connections on port 1587. \n \nTo configure your preferred client\
    \ you need to add an account with the same e-mail as the desired client's user\
    \ -  \nit will be used to identify the real sender in the client list of senders.\
    \  \nFor the example below we will use the sender - info@example.com - and the\
    \ username of client's user account - egoi@example.com. \n \nThe configuration\
    \ for the Outgoing SMTP Server in Thunderbird would be as follows: \n \nParameter\
    \ | Description | Definition/Example  \n--- | --- | --- \nMail Server |  the address\
    \ of the smtp server | bo51.e-goi.com \nPort | the port to connect to the smtp\
    \ | 1587 \nConnection Security | the security type | STARTTLS \nAuthentication\
    \ Method | the authentication method | *password* \nUser Name | the user name\
    \ | *egoi@example.com* \n \nAfter you add this configuration, you can use it by\
    \ sending from the info@example.com account and using the configured SMTP Server.\
    \  \nAfter you hit send the first time, the program should challange you for a\
    \ password to authenticate -  \nuse the password you normally you to access the\
    \ E-Goi Backoffice with the configured User Name (egoi@example.com in this case).\
    \ \n \n```php\n// This example uses PHPMailer \nrequire 'PHPMailerAutoload.php';\
    \ \n \n// Configure PHPMailer instance \n$mail = new PHPMailer; \n$mail->isSMTP();\
    \ \n$mail->SMTPAuth = true; \n$mail->Host = \"bo51.e-goi.com\"; \n$mail->Port\
    \ = 1587; \n$mail->SMTPSecure = \"tls\"; \n \n// Username and Password \n$mail->Username\
    \ = \"egoi@example.com\"; \n$mail->Password = \"the password\"; \n \n// From \n\
    $mail->setFrom('info@example.com', 'Sales Dept.'); \n    // .. or $mail->addCustomHeader('X-Sender-Hash:\
    \ abcdef1234567890abcdef1234567890'); \n \n// Destination \n$mail->addAddress('johndoe@mail.com',\
    \ 'John Doe'); \n    // .. or $mail->addCustomHeader('X-Reply-To-Hash: abcdef1234567890abcdef1234567890');\
    \ \n \n// Set the appropriate encoding for subject/body/alternate \n$mail->CharSet\
    \ = \"UTF-8\"; \n \n$mail->Subject = 'Here is your reciept'; \n \n// The content\
    \ is read from a file on the filesystem \n$mail->msgHTML(file_get_contents(\"\
    /path/to/receipt.html\")); \n \n// [optional] Set the text version of the message\
    \ \n$mail->AltBody = file_get_contents(\"/path/to/receipt.txt\"); \n \n// Define\
    \ custom headers \n$mail->addCustomHeader(\"X-Open-Tracking-Enabled: true\");\
    \ \n$mail->addCustomHeader(\"X-Click-Tracking-Enabled: true\"); \n \n// Define\
    \ Registered headers  \n$mail->addCustomHeader(\"X-Registered: true\"); \n \n\
    // Define message priority (optional)  \n//(X-Priority header is overriden by\
    \ PHPMailer when using addCustomHeader) \n$mail->Priority = \"urgent\"; \n \n\
    //send the message, check for errors \nif (!$mail->send()) { \n    echo \"Mailer\
    \ Error: \" . $mail->ErrorInfo; \n} else { \n    echo \"Message sent!\"; \n} \n\
    ```"
- name: Alerts
  description: "Alert are a routine of messages, prepared in advance, to be triggered\
    \ by events set by the user. \nThe channel of the message can be either Sms or\
    \ Email. \n \nThe Acknowledge Alerts entails two distinct steps: __Create__ and\
    \ __Execute__. \n \n__Create__ is the step where a Acknowledge Alerts flow (or\
    \ template) is set.  \nIt requires some identifying information, as well as the\
    \ message to be sent. \n \n__Execute__ takes the Acknowledge Alerts flow, customizes\
    \ the messages with __To__ addresses and merge tags. \nThen, it starts the flow\
    \ by sending the first message. \n \nWhen the Alarm is executed, the message is\
    \ resent after the interval,  \nunless someone responds to it (Acknowledge) or\
    \ the repetition limit is reached. \n \n![states](https://p16.f3.n0.cdn.getcloudapp.com/items/ApuA0gqj/AlertFlux.png?v=62233c7cc71d9225dcdef6fa00b8fa04)\
    \ \n \nThe alert can be in specific states. the following is a list of states\
    \ an alert can be in. \n \n![states](https://p16.f3.n0.cdn.getcloudapp.com/items/geuwNPD5/AlertStatus.png?v=32f612187ab3b658a5078397c200be71)\
    \ \n \nState | Description | Is Final? \n--- | --- | ---  \npending | The Alert\
    \ has been activated, and its awaiting recipient input | No \nacknowledge | The\
    \ Alert was responded by a recipient | Yes \nnoaction | The Alert was not responded\
    \ by a recipient, having reached the Max Attempts | Yes \ncancelack | The Alert\
    \ was canceled by the sender | Yes;"
- name: Reports
  description: Reports from the various channels from the use of the API
  x-displayName: Reports
- name: Message Information
  description: Get Messages
  x-displayName: Messages
- name: Webhooks
  description: "The transactional WebHooks feature provides a convenient way to follow\
    \ the thread of each message, \nby defining a callback URL to be invoked when\
    \ the message reaches each of the stages in its lifecycle. \n \nYou can use the\
    \ [Create WebHook](#operation/addWebHook) method  \nto configure what actions\
    \ to listen to, and where to send the information.  \nA JSON payload with the\
    \ event's details will be sent (using POST) to the configured URL. \n \nThe event\
    \ JSON payload takes the form of an event list.  \nSeveral events of any stage\
    \ can be sent in a single request to the callback in the form: \n \n``` \n[ \n\
    \  { \n  \"actionDate\": 1442484210599, \n  \"data\": { \n    \"groupId\": 1,\
    \ \n    \"recipientId\": 14, \n    \"messageId\": 2156, \n    \"createDate\":\
    \ 1442484203053, \n    \"recipientEmail\": \"john.doe@example.com\" \n  }, \n\
    \  \"action\": \"processed\" \n  } \n] \n``` \n \n## Email Hooks \n \nThe hooks\
    \ available in a mail message's lifecycle are: \n \n![states](https://p16.f3.n0.cdn.getcloudapp.com/items/L1upjvlG/EmailHooks.png?v=6d5712fcb2a42e49e1c382c132dc3a26)\
    \ \n \nState | Description | Is Final? \n--- | --- | ---  \nprocessed | The message\
    \ was successfully processed and is ready to be sent | No \ncanceled | The recipient's\
    \ status doesn't allow sending | Yes \nsent | The message was successfully sent\
    \ to the destination server. | No \nfailed | The message failed to send because\
    \ of an internal error in the SMTP | Yes \nbounce | The destination server rejected\
    \ the message permanently or temporarily | Yes \ndelivered | The message was delivered\
    \ to the recipient | Yes (if the recipient doesnt open the email) \nview | The\
    \ recipient viewed the message URLs (available only when tracking is enabled)\
    \ | Yes (if recipient doesnt click on the link) \nclick | The recipient clicked\
    \ in any of the message URLs (available only when tracking is enabled) | Yes (if\
    \ the user doesnt report the email) \nabuse | There was a complaint reported on\
    \ the ISP | Yes \n \n \n## Sms Hooks \n \nThe hooks available in a sms message's\
    \ lifecycle are: \n \n![states](https://p16.f3.n0.cdn.getcloudapp.com/items/yAuYE9RR/SmsHooks.png?v=db886756b250e23d9c6b7e0ac4296193)\
    \ \n \nState | Description | Is Final? \n--- | --- | ---  \nprocessed | The message\
    \ was successfully processed and is ready to be sent | No \ncanceled | The message\
    \ failed to send because of an internal error | Yes \nsent | The message was successfully\
    \ sent | No \nfailed | The message failed to send because of an internal error\
    \ | Yes \ndelivered | The message was successfully delivered to it's destination\
    \ | Yes "
- name: Domains
  description: Set up and Manage Domains
- name: Groups
  description: Join multiple Messages with tags
- name: Senders
  description: Check who's sending the messages
  x-displayName: Senders
- name: Utilities
  description: API state and other technical operations
paths:
  /v2/alert/action/execute:
    post:
      tags:
      - Alerts
      summary: Execute Alert
      description: This method executes an alert flow , using a pre-created alert
        template.
      operationId: executeEmailAlert
      requestBody:
        description: default response
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        "200":
          description: Email Alert has started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/alert/action/execute' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"alertTemplateName":"<string>","senderId":"<string>","to":[{"email":"<string>","mergeTags":["<string>","<string>"]},{"email":"<string>","mergeTags":["<string>","<string>"]}]}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/alert/action/execute");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"alertTemplateName\":\"<string>\",\"senderId\":\"<string>\",\"to\":[{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"alertTemplateName\":\"<string>\",\"senderId\":\"<string>\",\"to\":[{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]}]}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/alert/action/execute")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"alertTemplateName":"<string>","senderId":"<string>","to":[{"email":"<string>","mergeTags":["<string>","<string>"]},{"email":"<string>","mergeTags":["<string>","<string>"]}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/alert/action/execute");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/alert/action/execute",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"alertTemplateName\":\"<string>\",\"senderId\":\"<string>\",\"to\":[{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]}]}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"alertTemplateName\":\"<string>\",\"senderId\":\"<string>\",\"to\":[{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]}]}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/alert/action/execute", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/alert/action/execute")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"alertTemplateName\":\"<string>\",\"senderId\":\"<string>\",\"to\":[{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},{\"email\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]}]}"

          response = http.request(request)
          puts response.read_body
  /v2/alert/action/stop:
    post:
      tags:
      - Alerts
      summary: Stop Alert
      description: This method will stop any alerts that are being processed
      operationId: stopAlert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelAlertRequest'
      responses:
        "200":
          description: Alert was cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/alert/action/stop' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"alertName":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/alert/action/stop");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"alertName\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"alertName\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/alert/action/stop")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"alertName":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/alert/action/stop");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/alert/action/stop",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"alertName\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"alertName\":\"<string>\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/alert/action/stop", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/alert/action/stop")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"alertName\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/alert/template/{id}:
    get:
      tags:
      - Alerts
      summary: Get Single Alert Template
      description: This method returns the Alert Template wih the id in the path
      operationId: listMultiChannel
      parameters:
      - name: id
        in: path
        description: The id of the Alert Template
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "200":
          description: Return the Alert Template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertTemplateResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/alert/template/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/alert/template/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/alert/template/<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/alert/template/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/alert/template/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/alert/template/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/alert/template/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    delete:
      tags:
      - Alerts
      summary: Remove Alert Template
      description: This method removes an Alert Template from the system
      operationId: removeAlertTemplate
      parameters:
      - name: id
        in: path
        description: The id of the Alert Template to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "204":
          description: The Alert Template was deleted
          content: {}
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'slingshot.egoiapp.com/api/v2/alert/template/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/alert/template/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/alert/template/<string>")
              .method("DELETE", body)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "slingshot.egoiapp.com/api/v2/alert/template/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/alert/template/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("DELETE", "/v2/alert/template/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/alert/template/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    patch:
      tags:
      - Alerts
      summary: Change Single Alert Template
      description: This method will change information about the template
      operationId: changeAlertTemplate
      parameters:
      - name: id
        in: path
        description: The id of the Alert Template to edit
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AlertTemplateRequest'
      responses:
        "200":
          description: Alert Template was changed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AlertTemplateResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'slingshot.egoiapp.com/api/v2/alert/template/<string>' \
          --header 'ApiKey: ' \
          --header 'Content-Type: */*' \
          --data-raw '{"interval":"<integer>","maxAttempts":"<integer>","name":"<string>","templateId":"<string>","subject":"<string>","htmlBody":"<string>","textBody":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/alert/template/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "*/*");
          request.AddParameter("*/*", "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("*/*");
          RequestBody body = RequestBody.create(mediaType, "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/alert/template/<string>")
              .method("PATCH", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "*/*")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}";

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "slingshot.egoiapp.com/api/v2/alert/template/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "*/*");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/alert/template/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: */*"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': '*/*'
          }
          conn.request("PATCH", "/v2/alert/template/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/alert/template/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "*/*"
          request.body = "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/alert/template:
    get:
      tags:
      - Alerts
      summary: Get All Alert Template
      description: This method returns all the Alert Templates
      operationId: listMultiChannel_1
      responses:
        "200":
          description: Returns the Alert Templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertTemplateResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/alert/template' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/alert/template");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/alert/template")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/alert/template");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/alert/template",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/alert/template", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/alert/template")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    post:
      tags:
      - Alerts
      summary: Create Alert Template
      description: This method will create and add an alert template
      operationId: createAlertTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertTemplateRequest'
      responses:
        "200":
          description: Alert Template was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertTemplateIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/alert/template' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"interval":"<integer>","maxAttempts":"<integer>","name":"<string>","templateId":"<string>","subject":"<string>","htmlBody":"<string>","textBody":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/alert/template");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/alert/template")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"interval":"<integer>","maxAttempts":"<integer>","name":"<string>","templateId":"<string>","subject":"<string>","htmlBody":"<string>","textBody":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/alert/template");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/alert/template",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/alert/template", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/alert/template")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"interval\":\"<integer>\",\"maxAttempts\":\"<integer>\",\"name\":\"<string>\",\"templateId\":\"<string>\",\"subject\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/domain/{id}/validate:
    get:
      tags:
      - Domains
      summary: Validate Single Domain
      description: Clears the validation cache and validates the supplied configured
        Domain.
      operationId: validateDomain
      parameters:
      - name: id
        in: path
        description: The id of the Domain
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "200":
          description: The result of the Domain validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateDomainResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/domain/<string>/validate' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/domain/<string>/validate");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/domain/<string>/validate")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/domain/<string>/validate");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/domain/<string>/validate",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/domain/<string>/validate", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/domain/<string>/validate")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/domain/{id}:
    get:
      tags:
      - Domains
      summary: Get Single Domain
      description: Retrieve the Domain with the id in the path.
      operationId: listDomain
      parameters:
      - name: id
        in: path
        description: The id of the Verify Request
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "200":
          description: The Email Domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/domain/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/domain/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/domain/<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/domain/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/domain/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/domain/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/domain/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/domain/default:
    get:
      tags:
      - Domains
      summary: Get Default Domain
      description: Retrieve the currently configured default Domain. If no default
        domain is set, the list will be empty.
      operationId: listDefaultDomain
      responses:
        "200":
          description: The Default Email Domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/domain/default' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/domain/default");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/domain/default")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/domain/default");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/domain/default",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/domain/default", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/domain/default")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    post:
      tags:
      - Domains
      summary: Change Default Domain
      description: Change the currently configured default Domain
      operationId: changeDefaultDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultDomainRequest'
      responses:
        "200":
          description: The default domain has been changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/domain/default' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"domainId":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/domain/default");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"domainId\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"domainId\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/domain/default")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"domainId":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/domain/default");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/domain/default",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"domainId\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"domainId\":\"<string>\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/domain/default", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/domain/default")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"domainId\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/domain:
    get:
      tags:
      - Domains
      summary: Get All Domains
      description: Retrieve the list of all Domains available for the sender to the
        recipients.
      operationId: listDomains
      responses:
        "200":
          description: The list of Email Domains
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DomainResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/domain' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/domain");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/domain")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/domain");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/domain",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/domain", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/domain")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    post:
      tags:
      - Domains
      summary: Create New Domain
      description: Add a new Domain to the list of available Domains for the sender
        to the recipient.
      operationId: addDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRequest'
      responses:
        "201":
          description: The Domain was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/domain' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"type":"boolean","description":"Option to set the domain as default.","example":false,"default":false}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/domain");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"type\":\"boolean\",\"description\":\"Option to set the domain as default.\",\"example\":false,\"default\":false}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"type\":\"boolean\",\"description\":\"Option to set the domain as default.\",\"example\":false,\"default\":false}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/domain")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"type":"boolean","description":"Option to set the domain as default.","example":false,"default":false});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/domain");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/domain",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"type\":\"boolean\",\"description\":\"Option to set the domain as default.\",\"example\":false,\"default\":false}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"type\":\"boolean\",\"description\":\"Option to set the domain as default.\",\"example\":false,\"default\":false}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/domain", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/domain")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"type\":\"boolean\",\"description\":\"Option to set the domain as default.\",\"example\":false,\"default\":false}"

          response = http.request(request)
          puts response.read_body
  /v2/groups:
    get:
      tags:
      - Groups
      summary: Get All Groups
      description: Retrieve all groups to sort messages
      operationId: listGroups
      parameters:
      - name: channel
        in: query
        description: The channel of the groups. Can be `email` or `sms`, otherwise
          returns all groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Returns the groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupResponse'
                x-content-type: application/json
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/groups?channel=<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/groups?channel=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/groups?channel=<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/groups?channel=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/groups?channel=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/groups?channel=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/groups?channel=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/email/messages/{id}:
    get:
      tags:
      - Message Information
      summary: Get Single Email Messages
      description: Retrieve the message with the id from path
      operationId: listSingleEmailMessage
      parameters:
      - name: id
        in: path
        description: The id of the message.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Returns the Sms Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteEmailMessageResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/email/messages/<integer>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/email/messages/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/email/messages/<integer>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/email/messages/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/email/messages/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/email/messages/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/email/messages/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/email/messages:
    get:
      tags:
      - Message Information
      summary: Get All Email Messages
      description: |-
        Retrieve the list of all sms messages.
        Results can be filtered by messages ids, group or channel. The result will be a combination of all parameters present
      operationId: listAllEmailMessages
      parameters:
      - name: group
        in: query
        description: The name of the group to search
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 12
      - name: dateStart
        in: query
        description: The date to start the report. Date must be in format ``yyyy-MM-dd``
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-07-27
      - name: dateEnd
        in: query
        description: The date to end the report. Date should be in format ``yyyy-MM-dd``
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-07-28
      - name: destination
        in: query
        description: The mobile number of a recipient.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: johnDoe@email.com
      - name: status
        in: query
        description: The status to check the message.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - created
          - queued
          - processing
          - spool
          - sending
          - finished
          - send_failed
          - broken
          - delivered
          - rejected
          - bounce_hard
          - bounce_soft
          - scheduled
      responses:
        "200":
          description: Returns the Sms Messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartialEmailMessageResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/email/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/email/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/email/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/email/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/email/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/email/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/email/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/sms/messages:
    get:
      tags:
      - Message Information
      summary: Get All Sms Messages
      description: |-
        Retrieve the list of all sms messages.
        Results can be filtered by messages ids, group or channel. The result will be a combination of all parameters present
      operationId: listAllSmsMessages
      parameters:
      - name: group
        in: query
        description: The name of the group to search
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 12
      - name: dateStart
        in: query
        description: The date to start the report. Date must be in format ``yyyy-MM-dd``
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-07-27
      - name: dateEnd
        in: query
        description: The date to end the report. Date should be in format ``yyyy-MM-dd``
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-07-28
      - name: destination
        in: query
        description: The mobile number of a recipient.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: johnDoe@email.com
      - name: status
        in: query
        description: The status to check the message.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - created
          - queued
          - processing
          - spool
          - sending
          - finished
          - send_failed
          - broken
          - delivered
          - rejected
          - scheduled
      responses:
        "200":
          description: Returns the Sms Messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PartialSmsMessageResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGenericResponse'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGenericResponse'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGenericResponse'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/sms/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/sms/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/sms/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/sms/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/sms/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/sms/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/sms/messages?group=<string>&dateStart=<string>&dateEnd=<string>&destination=<string>&status=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/sms/messages/{id}:
    get:
      tags:
      - Message Information
      summary: Get Single Sms Messages
      description: Retrieve the message with the id from path
      operationId: listSingleSmsMessage
      parameters:
      - name: id
        in: path
        description: The id of the message.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Returns the Sms Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteSmsMessageResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGenericResponse'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGenericResponse'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGenericResponse'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/sms/messages/<integer>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/sms/messages/<integer>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/sms/messages/<integer>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/sms/messages/<integer>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/sms/messages/<integer>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/sms/messages/<integer>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/sms/messages/<integer>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/apps/{id}:
    get:
      tags:
      - Push
      summary: Get an App
      description: Gets an App
      operationId: listApp
      parameters:
      - name: id
        in: path
        description: Id of the App. Cannot be empty.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the App
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileAppIdResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/apps/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/apps/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/apps/<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/apps/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/apps/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/apps/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/apps/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    put:
      tags:
      - Push
      summary: Update App
      description: Updates an App, given a template id
      operationId: updateApp
      parameters:
      - name: id
        in: path
        description: Id of the Push Template. Cannot be empty.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileAppRequest'
      responses:
        "200":
          description: Push Template was changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileAppIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PUT 'slingshot.egoiapp.com/api/v2/apps/<string>' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","sandbox":"<boolean>","certificate":"<string>","password":"<string>","authKey":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/apps/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PUT);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/apps/<string>")
              .method("PUT", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","sandbox":"<boolean>","certificate":"<string>","password":"<string>","authKey":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PUT", "slingshot.egoiapp.com/api/v2/apps/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/apps/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("PUT", "/v2/apps/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/apps/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Put.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
    delete:
      tags:
      - Push
      summary: Remove App
      description: Remove App
      operationId: deleteApp
      parameters:
      - name: id
        in: path
        description: Id of the app. Cannot be empty.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: The App was deleted
          content: {}
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'slingshot.egoiapp.com/api/v2/apps/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/apps/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/apps/<string>")
              .method("DELETE", body)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "slingshot.egoiapp.com/api/v2/apps/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/apps/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("DELETE", "/v2/apps/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/apps/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/apps:
    get:
      tags:
      - Push
      summary: Get All Apps
      description: Obtains all the Apps
      operationId: listApps
      responses:
        "200":
          description: Returns the Push Template
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MobileAppResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/apps' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/apps");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/apps")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/apps");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/apps",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/apps", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/apps")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    post:
      tags:
      - Push
      summary: Create App
      description: Creates a new App
      operationId: addApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileAppRequest'
      responses:
        "201":
          description: Push Template was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/apps' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","sandbox":"<boolean>","certificate":"<string>","password":"<string>","authKey":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/apps");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/apps")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","sandbox":"<boolean>","certificate":"<string>","password":"<string>","authKey":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/apps");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/apps",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/apps", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/apps")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"sandbox\":\"<boolean>\",\"certificate\":\"<string>\",\"password\":\"<string>\",\"authKey\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/multi-channel/flow/{id}:
    get:
      tags:
      - Multi-Channel
      summary: Get Single Multi-Channel Flow
      description: This method returns the Multi-Channel Flow wih the id in the path
      operationId: listMultiChannel_2
      parameters:
      - name: id
        in: path
        description: The id of the Multi-Channel Flow
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "200":
          description: Return the Multi-Channel Flow
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MultiChannelFlowResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/multi-channel/flow/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    delete:
      tags:
      - Multi-Channel
      summary: Remove Single Multi-Channel
      description: This method removes a Multi-Channel Flow from the system
      operationId: removeMultiChannel
      parameters:
      - name: id
        in: path
        description: The id of the Multi-Channel Flow to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "204":
          description: The Multi-Channel Flow was deleted
          content: {}
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>")
              .method("DELETE", body)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("DELETE", "/v2/multi-channel/flow/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/multi-channel/flow/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/multi-channel/execute:
    post:
      tags:
      - Multi-Channel
      summary: Execute Multi-Channel
      description: This method will create and start a flow, sending the Multi-Channel
        of messages to the appropriate recipient
      operationId: executeMultiChannel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteMultiChannelRequest'
      responses:
        "200":
          description: Multichannel flow has started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiChannelIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/multi-channel/execute' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"templateId":"<string>","to":{"email":"<string>","phone":"<string>","mergeTags":["<string>","<string>"]},"sender":{"emailSenderId":"<string>","phoneSenderId":"<string>"}}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/multi-channel/execute");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"templateId\":\"<string>\",\"to\":{\"email\":\"<string>\",\"phone\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},\"sender\":{\"emailSenderId\":\"<string>\",\"phoneSenderId\":\"<string>\"}}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"templateId\":\"<string>\",\"to\":{\"email\":\"<string>\",\"phone\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},\"sender\":{\"emailSenderId\":\"<string>\",\"phoneSenderId\":\"<string>\"}}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/multi-channel/execute")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"templateId":"<string>","to":{"email":"<string>","phone":"<string>","mergeTags":["<string>","<string>"]},"sender":{"emailSenderId":"<string>","phoneSenderId":"<string>"}});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/multi-channel/execute");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/multi-channel/execute",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"templateId\":\"<string>\",\"to\":{\"email\":\"<string>\",\"phone\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},\"sender\":{\"emailSenderId\":\"<string>\",\"phoneSenderId\":\"<string>\"}}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"templateId\":\"<string>\",\"to\":{\"email\":\"<string>\",\"phone\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},\"sender\":{\"emailSenderId\":\"<string>\",\"phoneSenderId\":\"<string>\"}}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/multi-channel/execute", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/multi-channel/execute")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"templateId\":\"<string>\",\"to\":{\"email\":\"<string>\",\"phone\":\"<string>\",\"mergeTags\":[\"<string>\",\"<string>\"]},\"sender\":{\"emailSenderId\":\"<string>\",\"phoneSenderId\":\"<string>\"}}"

          response = http.request(request)
          puts response.read_body
  /v2/multi-channel/flow:
    get:
      tags:
      - Multi-Channel
      summary: Get All Multi-Channel Flows
      description: This method returns all Multi-Channels Flows set in the system
      operationId: listMultiChannels
      responses:
        "200":
          description: Return all the Multi-Channel flows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MultiChannelFlowResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/multi-channel/flow' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/multi-channel/flow");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/multi-channel/flow")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/multi-channel/flow");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/multi-channel/flow",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/multi-channel/flow", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/multi-channel/flow")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    post:
      tags:
      - Multi-Channel
      summary: Create Multi-Channel Flow
      description: This method will create and add a Multi-Channel Flow. First message
        doesn't need interval or condition, since it doesn't depend on other messages
      operationId: createMultiChannelFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiChannelFlowRequest'
      responses:
        "201":
          description: Multi-Channel Flow was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiChannelFlowIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/multi-channel/flow' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"name":"<string>","group":"<string>","messages":[{"channel":"<string>","interval":"<integer>","condition":"<string>","templateId":"<integer>","subject":"<string>","textBody":"<string>","htmlBody":"<string>"},{"channel":"<string>","interval":"<integer>","condition":"<string>","templateId":"<integer>","subject":"<string>","textBody":"<string>","htmlBody":"<string>"}]}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/multi-channel/flow");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"name\":\"<string>\",\"group\":\"<string>\",\"messages\":[{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"},{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"}]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<string>\",\"group\":\"<string>\",\"messages\":[{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"},{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"}]}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/multi-channel/flow")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"name":"<string>","group":"<string>","messages":[{"channel":"<string>","interval":"<integer>","condition":"<string>","templateId":"<integer>","subject":"<string>","textBody":"<string>","htmlBody":"<string>"},{"channel":"<string>","interval":"<integer>","condition":"<string>","templateId":"<integer>","subject":"<string>","textBody":"<string>","htmlBody":"<string>"}]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/multi-channel/flow");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/multi-channel/flow",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"name\":\"<string>\",\"group\":\"<string>\",\"messages\":[{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"},{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"}]}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"name\":\"<string>\",\"group\":\"<string>\",\"messages\":[{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"},{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"}]}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/multi-channel/flow", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/multi-channel/flow")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"name\":\"<string>\",\"group\":\"<string>\",\"messages\":[{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"},{\"channel\":\"<string>\",\"interval\":\"<integer>\",\"condition\":\"<string>\",\"templateId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"htmlBody\":\"<string>\"}]}"

          response = http.request(request)
          puts response.read_body
  /v2/sms/reports:
    get:
      tags:
      - Reports
      summary: Get Sms Report
      description: Retrieve Sms Reports and Statistics. Entries can be customizable
      operationId: produceSmsReport
      parameters:
      - name: group
        in: query
        description: The id of the group to search
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 12
      - name: groupBy
        in: query
        description: The option to group the results. Can be either ``day`` or ``month``.
          Defaults to ``day`` if none are present
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: month
      - name: dateStart
        in: query
        description: The date to start the report. Date must be in format ``yyyy-MM-dd``
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-07-27
      - name: dateEnd
        in: query
        description: The date to end the report. Date should be in format ``yyyy-MM-dd``
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-07-28
      responses:
        "200":
          description: The Sms Report
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmsReportResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/sms/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/sms/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/sms/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/sms/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/sms/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/sms/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/sms/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/email/reports:
    get:
      tags:
      - Reports
      summary: Get Email Report
      description: Retrieve Mail Reports and Statistics. Entries can be customizable
      operationId: produceEmailReport
      parameters:
      - name: group
        in: query
        description: The name of the group to search
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 12
      - name: groupBy
        in: query
        description: The option to group the results. Can be either ``day`` or ``month``.
          Defaults to ``day`` if none are present
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: month
      - name: dateStart
        in: query
        description: The date to start the report. Date must be in format ``yyyy-MM-dd``
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-07-27
      - name: dateEnd
        in: query
        description: The date to end the report. Date should be in format ``yyyy-MM-dd``
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-07-28
      responses:
        "200":
          description: The Email Report
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailReportResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/email/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/email/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/email/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/email/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/email/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/email/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/email/reports?group=<string>&groupBy=<string>&dateStart=<string>&dateEnd=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/messages/{id}/action/send:
    post:
      tags:
      - Schedule
      summary: Cancel a Scheduled Message
      description: Cancel a Scheduled Message
      operationId: cancelScheduledMessage
      parameters:
      - name: id
        in: path
        description: Id of the Message to cancel the send.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Message was created and is awaiting process
          content: {}
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/messages/<string>/action/send' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/messages/<string>/action/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/messages/<string>/action/send")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/messages/<string>/action/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/messages/<string>/action/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("POST", "/v2/messages/<string>/action/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/messages/<string>/action/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/email/messages/action/send:
    post:
      tags:
      - Email
      summary: Send an Email Message
      description: Send an email message to a recipient
      operationId: sendEmailMessages
      requestBody:
        description: default response
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                oneOf:
                - $ref: '#/components/schemas/Manual_Email'
                - $ref: '#/components/schemas/Template_Email'
      responses:
        "201":
          description: Message was created and is awaiting process
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SendMessageIdResponse'
                x-content-type: application/json
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/email/messages/action/send' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '[{"senderId":"<string>","subject":"<string>","to":["<string>","<string>"],"domain":"<string>","senderName":"<string>","cc":["<string>","<string>"],"bcc":["<string>","<string>"],"replyToId":"<string>","htmlBody":"<string>","textBody":"<string>","openTracking":false,"clickTracking":false,"attachment":[{"arrangement":"attachment","data":"<string>","filename":"<string>","mimeType":"<string>"},{"arrangement":"attachment","data":"<string>","filename":"<string>","mimeType":"<string>"}],"mergeTags":["<string>","<string>"],"customData":"<string>","priority":"non-urgent","registered":false,"header":{"optInIpAddress":"<string>","listUnsubscribe":false},"group":"default"},{"senderId":"<string>","subject":"<string>","to":["<string>","<string>"],"domain":"<string>","senderName":"<string>","cc":["<string>","<string>"],"bcc":["<string>","<string>"],"replyToId":"<string>","htmlBody":"<string>","textBody":"<string>","openTracking":false,"clickTracking":false,"attachment":[{"arrangement":"attachment","data":"<string>","filename":"<string>","mimeType":"<string>"},{"arrangement":"attachment","data":"<string>","filename":"<string>","mimeType":"<string>"}],"mergeTags":["<string>","<string>"],"customData":"<string>","priority":"non-urgent","registered":false,"header":{"optInIpAddress":"<string>","listUnsubscribe":false},"group":"default"}]'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/email/messages/action/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "[{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"},{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"}]",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "[{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"},{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"}]");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/email/messages/action/send")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify([{"senderId":"<string>","subject":"<string>","to":["<string>","<string>"],"domain":"<string>","senderName":"<string>","cc":["<string>","<string>"],"bcc":["<string>","<string>"],"replyToId":"<string>","htmlBody":"<string>","textBody":"<string>","openTracking":false,"clickTracking":false,"attachment":[{"arrangement":"attachment","data":"<string>","filename":"<string>","mimeType":"<string>"},{"arrangement":"attachment","data":"<string>","filename":"<string>","mimeType":"<string>"}],"mergeTags":["<string>","<string>"],"customData":"<string>","priority":"non-urgent","registered":false,"header":{"optInIpAddress":"<string>","listUnsubscribe":false},"group":"default"},{"senderId":"<string>","subject":"<string>","to":["<string>","<string>"],"domain":"<string>","senderName":"<string>","cc":["<string>","<string>"],"bcc":["<string>","<string>"],"replyToId":"<string>","htmlBody":"<string>","textBody":"<string>","openTracking":false,"clickTracking":false,"attachment":[{"arrangement":"attachment","data":"<string>","filename":"<string>","mimeType":"<string>"},{"arrangement":"attachment","data":"<string>","filename":"<string>","mimeType":"<string>"}],"mergeTags":["<string>","<string>"],"customData":"<string>","priority":"non-urgent","registered":false,"header":{"optInIpAddress":"<string>","listUnsubscribe":false},"group":"default"}]);

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/email/messages/action/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/email/messages/action/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"[{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"},{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"}]",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "[{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"},{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"}]"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/email/messages/action/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/email/messages/action/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "[{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"},{\"senderId\":\"<string>\",\"subject\":\"<string>\",\"to\":[\"<string>\",\"<string>\"],\"domain\":\"<string>\",\"senderName\":\"<string>\",\"cc\":[\"<string>\",\"<string>\"],\"bcc\":[\"<string>\",\"<string>\"],\"replyToId\":\"<string>\",\"htmlBody\":\"<string>\",\"textBody\":\"<string>\",\"openTracking\":false,\"clickTracking\":false,\"attachment\":[{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"},{\"arrangement\":\"attachment\",\"data\":\"<string>\",\"filename\":\"<string>\",\"mimeType\":\"<string>\"}],\"mergeTags\":[\"<string>\",\"<string>\"],\"customData\":\"<string>\",\"priority\":\"non-urgent\",\"registered\":false,\"header\":{\"optInIpAddress\":\"<string>\",\"listUnsubscribe\":false},\"group\":\"default\"}]"

          response = http.request(request)
          puts response.read_body
  /v2/sms/messages/action/send:
    post:
      tags:
      - Sms
      summary: Send an SMS Message
      description: Send an sms message to a recipient
      operationId: sendSmsMessages
      requestBody:
        description: default response
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                oneOf:
                - $ref: '#/components/schemas/Manual_SMS'
                - $ref: '#/components/schemas/Template_SMS'
      responses:
        "201":
          description: Message was created and is awaiting process
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SendMessageIdResponse'
                x-content-type: application/json
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/sms/messages/action/send' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '[{"from":"<string>","textBody":"<string>","to":"<string>","encoding":"<string>","maxCount":"<integer>","mergeTags":["<string>","<string>"],"priority":"non-urgent","customData":"<string>","registered":false,"group":"default"},{"from":"<string>","textBody":"<string>","to":"<string>","encoding":"<string>","maxCount":"<integer>","mergeTags":["<string>","<string>"],"priority":"non-urgent","customData":"<string>","registered":false,"group":"default"}]'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/sms/messages/action/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "[{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"},{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"}]",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "[{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"},{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"}]");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/sms/messages/action/send")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify([{"from":"<string>","textBody":"<string>","to":"<string>","encoding":"<string>","maxCount":"<integer>","mergeTags":["<string>","<string>"],"priority":"non-urgent","customData":"<string>","registered":false,"group":"default"},{"from":"<string>","textBody":"<string>","to":"<string>","encoding":"<string>","maxCount":"<integer>","mergeTags":["<string>","<string>"],"priority":"non-urgent","customData":"<string>","registered":false,"group":"default"}]);

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/sms/messages/action/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/sms/messages/action/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"[{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"},{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"}]",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "[{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"},{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"}]"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/sms/messages/action/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/sms/messages/action/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "[{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"},{\"from\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"encoding\":\"<string>\",\"maxCount\":\"<integer>\",\"mergeTags\":[\"<string>\",\"<string>\"],\"priority\":\"non-urgent\",\"customData\":\"<string>\",\"registered\":false,\"group\":\"default\"}]"

          response = http.request(request)
          puts response.read_body
  /v2/push/messages/action/send:
    post:
      tags:
      - Push
      summary: Send a Push Message
      description: Send an push message to a recipient
      operationId: sendPushMessages
      requestBody:
        description: default response
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                oneOf:
                - $ref: '#/components/schemas/Manual_Push'
                - $ref: '#/components/schemas/Template_Push'
      responses:
        "201":
          description: Message was created and is awaiting process
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SendMessageIdResponse'
                x-content-type: application/json
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/push/messages/action/send' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '[{"appId":"<integer>","subject":"<string>","textBody":"<string>","to":"<string>","custom":"<string>"},{"appId":"<integer>","subject":"<string>","textBody":"<string>","to":"<string>","custom":"<string>"}]'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/push/messages/action/send");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "[{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"},{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"}]",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "[{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"},{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"}]");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/push/messages/action/send")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify([{"appId":"<integer>","subject":"<string>","textBody":"<string>","to":"<string>","custom":"<string>"},{"appId":"<integer>","subject":"<string>","textBody":"<string>","to":"<string>","custom":"<string>"}]);

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/push/messages/action/send");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/push/messages/action/send",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"[{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"},{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"}]",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "[{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"},{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"}]"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/push/messages/action/send", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/push/messages/action/send")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "[{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"},{\"appId\":\"<integer>\",\"subject\":\"<string>\",\"textBody\":\"<string>\",\"to\":\"<string>\",\"custom\":\"<string>\"}]"

          response = http.request(request)
          puts response.read_body
  /v2/email/senders:
    get:
      tags:
      - Senders
      summary: Get All Email Senders
      description: Retrieve the list of available Email senders
      operationId: getEmailSenders
      responses:
        "200":
          description: The list of Email Senders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailSenderResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/email/senders' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/email/senders");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/email/senders")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/email/senders");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/email/senders",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/email/senders", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/email/senders")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/sms/senders:
    get:
      tags:
      - Senders
      summary: Get All Sms Senders
      description: Return all Sms Senders defined by the user
      operationId: getSmsSenders
      responses:
        "200":
          description: The list of SMS senders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmsSenderResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/sms/senders' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/sms/senders");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/sms/senders")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/sms/senders");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/sms/senders",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/sms/senders", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/sms/senders")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/push/templates:
    get:
      tags:
      - Push
      summary: Get All Push Templates
      description: Obtains all the Push templates
      operationId: listPushTemplates
      responses:
        "200":
          description: Returns the Push Template
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SinglePushTemplateResponse'
                x-content-type: application/json
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/push/templates' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/push/templates");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/push/templates")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/push/templates");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/push/templates",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/push/templates", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/push/templates")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    post:
      tags:
      - Push
      summary: Create Push Template
      description: Creates a new template record for Push
      operationId: addPushTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushTemplateRequest'
      responses:
        "201":
          description: Push Template was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/push/templates' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"subject":"<string>","templateName":"<string>","textBody":"<string>","appId":"unicode","customData":"1"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/push/templates");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/push/templates")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"subject":"<string>","templateName":"<string>","textBody":"<string>","appId":"unicode","customData":"1"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/push/templates");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/push/templates",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/push/templates", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/push/templates")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}"

          response = http.request(request)
          puts response.read_body
  /v2/push/templates/{id}:
    get:
      tags:
      - Push
      summary: Get an Push Template
      description: Gets an Push Template
      operationId: listPushTemplate
      parameters:
      - name: id
        in: path
        description: Id of the Push Template. Cannot be empty.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the Push Template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinglePushTemplateResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/push/templates/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/push/templates/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/push/templates/<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/push/templates/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/push/templates/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/push/templates/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/push/templates/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    delete:
      tags:
      - Push
      summary: Remove Push Template
      description: Remove Push Template
      operationId: deletePushTemplate
      parameters:
      - name: id
        in: path
        description: Id of the Push Template. Cannot be empty.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: The Push Template was deleted
          content: {}
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'slingshot.egoiapp.com/api/v2/push/templates/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/push/templates/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/push/templates/<string>")
              .method("DELETE", body)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "slingshot.egoiapp.com/api/v2/push/templates/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/push/templates/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("DELETE", "/v2/push/templates/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/push/templates/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    patch:
      tags:
      - Push
      summary: Update Push Template
      description: Updates an Push template, given a template id
      operationId: updatePushTemplate
      parameters:
      - name: id
        in: path
        description: Id of the Push Template. Cannot be empty.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PushTemplateRequest'
      responses:
        "200":
          description: Push Template was changed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SinglePushTemplateResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request PATCH 'slingshot.egoiapp.com/api/v2/push/templates/<string>' \
          --header 'ApiKey: ' \
          --header 'Content-Type: */*' \
          --data-raw '{"subject":"<string>","templateName":"<string>","textBody":"<string>","appId":"unicode","customData":"1"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/push/templates/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.PATCH);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "*/*");
          request.AddParameter("*/*", "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("*/*");
          RequestBody body = RequestBody.create(mediaType, "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/push/templates/<string>")
              .method("PATCH", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "*/*")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}";

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("PATCH", "slingshot.egoiapp.com/api/v2/push/templates/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "*/*");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/push/templates/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_POSTFIELDS =>"{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: */*"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': '*/*'
          }
          conn.request("PATCH", "/v2/push/templates/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/push/templates/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Patch.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "*/*"
          request.body = "{\"subject\":\"<string>\",\"templateName\":\"<string>\",\"textBody\":\"<string>\",\"appId\":\"unicode\",\"customData\":\"1\"}"

          response = http.request(request)
          puts response.read_body
  /v2/emailValidator:
    post:
      tags:
      - Utilities
      summary: Email Validator
      description: Validates status and heath of the email address
      operationId: emailValidator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailValidatorRequest'
      responses:
        "200":
          description: Returns corresponding SMS Length Data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/emailValidator' \
          --header 'Content-Type: application/json' \
          --data-raw '{"email":"<string>","isMx":"<boolean>","isTemporaryEmail":"<boolean>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/emailValidator");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"email\":\"<string>\",\"isMx\":\"<boolean>\",\"isTemporaryEmail\":\"<boolean>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"email\":\"<string>\",\"isMx\":\"<boolean>\",\"isTemporaryEmail\":\"<boolean>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/emailValidator")
              .method("POST", body)
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"email":"<string>","isMx":"<boolean>","isTemporaryEmail":"<boolean>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/emailValidator");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/emailValidator",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"email\":\"<string>\",\"isMx\":\"<boolean>\",\"isTemporaryEmail\":\"<boolean>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"email\":\"<string>\",\"isMx\":\"<boolean>\",\"isTemporaryEmail\":\"<boolean>\"}"
          headers = {
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/emailValidator", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/emailValidator")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Content-Type"] = "application/json"
          request.body = "{\"email\":\"<string>\",\"isMx\":\"<boolean>\",\"isTemporaryEmail\":\"<boolean>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/redoc:
    get:
      operationId: redocStyleDoc
      responses:
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error500'
  /v2/ping:
    get:
      tags:
      - Utilities
      summary: Ping API
      description: |
        Send an innocuous request to the API, in order to confirm its working as intended
      operationId: pingApi
      responses:
        "200":
          description: Returns if the Api is running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      x-code-samples:
      - lang: cURL
        source: curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/ping'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/ping");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/ping")
              .method("GET", null)
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/ping");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/ping",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {}
          conn.request("GET", "/v2/ping", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/ping")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)

          response = http.request(request)
          puts response.read_body
  /v2/validate-phone/{number}:
    get:
      tags:
      - Utilities
      summary: Validate Phone
      description: Checks if a phone number is valid. Can be either land line or mobile
      operationId: validatePhone
      parameters:
      - name: number
        in: path
        description: The phone number to validate. must be in format ``countryCode-mobileNumber``
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 351-987654321
      responses:
        "200":
          description: Returns if the Api is running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatePhoneResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/validate-phone/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/validate-phone/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/validate-phone/<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/validate-phone/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/validate-phone/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/validate-phone/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/validate-phone/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/htmlToPdfConverter:
    post:
      tags:
      - Utilities
      summary: HTML to PDF converter
      description: Converts an HTML input (either via html string or url) to a PDF
        returned at base 64. Before using, please validate if your HTML content isdone
        accordingly to the best standards [HERE](https://validator.w3.org/)
      operationId: htmlToPdf
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HtmlToPdfRequest'
      responses:
        "200":
          description: Returns the base 64 PDF file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HtmlToPdfResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/htmlToPdfConverter' \
          --header 'Content-Type: application/json' \
          --data-raw '{"html":"<string>","url":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/htmlToPdfConverter");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"html\":\"<string>\",\"url\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"html\":\"<string>\",\"url\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/htmlToPdfConverter")
              .method("POST", body)
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"html":"<string>","url":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/htmlToPdfConverter");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/htmlToPdfConverter",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"html\":\"<string>\",\"url\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"html\":\"<string>\",\"url\":\"<string>\"}"
          headers = {
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/htmlToPdfConverter", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/htmlToPdfConverter")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Content-Type"] = "application/json"
          request.body = "{\"html\":\"<string>\",\"url\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/smsLengthCalculator:
    post:
      tags:
      - Utilities
      summary: SMS Length Calculator
      description: Calculates the sizes of an SMS text
      operationId: smsLengthCalculator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmsLengthCalculatorRequest'
      responses:
        "200":
          description: Returns corresponding SMS Length Data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmsLengthCalculatorResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/smsLengthCalculator' \
          --header 'Content-Type: application/json' \
          --data-raw '{"gsm0338":"<boolean>","message":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/smsLengthCalculator");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"gsm0338\":\"<boolean>\",\"message\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"gsm0338\":\"<boolean>\",\"message\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/smsLengthCalculator")
              .method("POST", body)
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"gsm0338":"<boolean>","message":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/smsLengthCalculator");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/smsLengthCalculator",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"gsm0338\":\"<boolean>\",\"message\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"gsm0338\":\"<boolean>\",\"message\":\"<string>\"}"
          headers = {
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/smsLengthCalculator", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/smsLengthCalculator")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["Content-Type"] = "application/json"
          request.body = "{\"gsm0338\":\"<boolean>\",\"message\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/verify/request:
    post:
      tags:
      - Verify
      summary: Request Verify
      description: This method will generate a code and send a message with it to
        a recipient
      operationId: requestVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
      responses:
        "201":
          description: Code has been created and sent to the recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/verify/request' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"senderId":"<string>","to":"<string>","message":"<string>","codeLength":6,"codeValidity":600,"codeType":"numeric"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/verify/request");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"senderId\":\"<string>\",\"to\":\"<string>\",\"message\":\"<string>\",\"codeLength\":6,\"codeValidity\":600,\"codeType\":\"numeric\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"senderId\":\"<string>\",\"to\":\"<string>\",\"message\":\"<string>\",\"codeLength\":6,\"codeValidity\":600,\"codeType\":\"numeric\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/verify/request")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"senderId":"<string>","to":"<string>","message":"<string>","codeLength":6,"codeValidity":600,"codeType":"numeric"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/verify/request");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/verify/request",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"senderId\":\"<string>\",\"to\":\"<string>\",\"message\":\"<string>\",\"codeLength\":6,\"codeValidity\":600,\"codeType\":\"numeric\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"senderId\":\"<string>\",\"to\":\"<string>\",\"message\":\"<string>\",\"codeLength\":6,\"codeValidity\":600,\"codeType\":\"numeric\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/verify/request", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/verify/request")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"senderId\":\"<string>\",\"to\":\"<string>\",\"message\":\"<string>\",\"codeLength\":6,\"codeValidity\":600,\"codeType\":\"numeric\"}"

          response = http.request(request)
          puts response.read_body
  /v2/verify/{id}:
    get:
      tags:
      - Verify
      summary: Get Verify Request
      description: This method gets a verify requests, including status of it
      operationId: getVerify
      parameters:
      - name: id
        in: path
        description: The id of the Verify Request
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "200":
          description: The information about the Verify request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckVerifyResponse'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/verify/<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/verify/<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/verify/<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/verify/<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/verify/<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/verify/<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/verify/<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/verify/{id}/validate:
    post:
      tags:
      - Verify
      summary: Validate Verify Code
      description: This method validates the code submitted by the recipient. This
        request should be made by the sender of the Verify request
      operationId: validateVerifyCode
      parameters:
      - name: id
        in: path
        description: The id of the Verify Request
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateCodeVerifyRequest'
      responses:
        "200":
          description: The result of the code validation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerifyIdResponse'
                x-content-type: application/json
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/verify/<string>/validate' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"code":"<string>"}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/verify/<string>/validate");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"code\":\"<string>\"}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"code\":\"<string>\"}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/verify/<string>/validate")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"code":"<string>"});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/verify/<string>/validate");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/verify/<string>/validate",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"code\":\"<string>\"}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"code\":\"<string>\"}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/verify/<string>/validate", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/verify/<string>/validate")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"code\":\"<string>\"}"

          response = http.request(request)
          puts response.read_body
  /v2/verify/{id}/cancel:
    post:
      tags:
      - Verify
      summary: Cancel Verify Request
      description: This method will cancel the requested verify. No codes will be
        further generated or confirmed within the context of the id of the message
      operationId: cancelVerify
      parameters:
      - name: id
        in: path
        description: The id of the Verify Request
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "200":
          description: The message is canceled
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerifyIdResponse'
                x-content-type: application/json
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/verify/<string>/cancel' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/verify/<string>/cancel");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/verify/<string>/cancel")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/verify/<string>/cancel");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/verify/<string>/cancel",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("POST", "/v2/verify/<string>/cancel", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/verify/<string>/cancel")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/verify/{id}/resend:
    post:
      tags:
      - Verify
      summary: Resend Verify Code
      description: This method will resend the requested verify. A new code will be
        generated and sent to the recipient
      operationId: resendVerify
      parameters:
      - name: id
        in: path
        description: The id of the Verify Request
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 1234
      responses:
        "200":
          description: The id of the verify request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VerifyIdResponse'
                x-content-type: application/json
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/verify/<string>/resend' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/verify/<string>/resend");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/verify/<string>/resend")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/verify/<string>/resend");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/verify/<string>/resend",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("POST", "/v2/verify/<string>/resend", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/verify/<string>/resend")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
  /v2/webhooks:
    get:
      tags:
      - Webhooks
      summary: Get All Webhooks
      description: Return all Webhooks defined by the user
      operationId: listWebHooks
      parameters:
      - name: channel
        in: query
        description: The channel of the groups. Can be `email` or `sms`, otherwise
          returns all groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: All Webhooks configured
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetWebhooksResponse'
                x-content-type: application/json
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request GET 'slingshot.egoiapp.com/api/v2/webhooks?channel=<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/webhooks?channel=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.GET);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/webhooks?channel=<string>")
              .method("GET", null)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("GET", "slingshot.egoiapp.com/api/v2/webhooks?channel=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/webhooks?channel=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("GET", "/v2/webhooks?channel=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/webhooks?channel=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Get.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
    post:
      tags:
      - Webhooks
      summary: Create new Webhook
      description: Create a new Webhook
      operationId: addWebHook
      requestBody:
        description: default response
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_1'
      responses:
        "201":
          description: Webhook was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookIdResponse'
        "400":
          description: BAD REQUEST - Request is improperly built. May have missing/incorrect
            parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request POST 'slingshot.egoiapp.com/api/v2/webhooks' \
          --header 'ApiKey: ' \
          --header 'Content-Type: application/json' \
          --data-raw '{"channel":"<string>","url":"<string>","actions":["<string>","<string>"]}'
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/webhooks");
          client.Timeout = 30;
          var request = new RestRequest(Method.POST);
          request.AddHeader("ApiKey", "");
          request.AddHeader("Content-Type", "application/json");
          request.AddParameter("application/json", "{\"channel\":\"<string>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"]}",  ParameterType.RequestBody);
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("application/json");
          RequestBody body = RequestBody.create(mediaType, "{\"channel\":\"<string>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"]}");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/webhooks")
              .method("POST", body)
              .addHeader("ApiKey", "")
              .addHeader("Content-Type", "application/json")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |-
          var data = JSON.stringify({"channel":"<string>","url":"<string>","actions":["<string>","<string>"]});

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("POST", "slingshot.egoiapp.com/api/v2/webhooks");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");
          xhr.setRequestHeader("Content-Type", "application/json");

          xhr.send(data);
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/webhooks",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS =>"{\"channel\":\"<string>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"]}",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: ",
                  "Content-Type: application/json"
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = "{\"channel\":\"<string>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"]}"
          headers = {
              'ApiKey': '',
              'Content-Type': 'application/json'
          }
          conn.request("POST", "/v2/webhooks", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/webhooks")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Post.new(url)
          request["ApiKey"] = ""
          request["Content-Type"] = "application/json"
          request.body = "{\"channel\":\"<string>\",\"url\":\"<string>\",\"actions\":[\"<string>\",\"<string>\"]}"

          response = http.request(request)
          puts response.read_body
    delete:
      tags:
      - Webhooks
      summary: Remove Webhook
      description: Remove a Webhook
      operationId: removeWebHook
      parameters:
      - name: id
        in: query
        description: Id of the contact to be delete. Cannot be empty.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: channel
        in: query
        description: The channel of the Webhook. Can be `email` or `sms`, otherwise
          removes all the requested webhooks.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Webhook was deleted.
          content: {}
        "401":
          description: UNAUTHORIZED - The ApiKey is not present in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        "403":
          description: FORBIDDEN - The ApiKey doesn't allow you to make that request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403'
        "404":
          description: NOT FOUND - The requested object was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        "500":
          description: INTERNAL SERVER ERROR - The API ran into an error and cannot
            process the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      security:
      - ApiKey: []
      x-code-samples:
      - lang: cURL
        source: |-
          curl --location --max-time 30 --request DELETE 'slingshot.egoiapp.com/api/v2/webhooks?id=<string>&channel=<string>' \
          --header 'ApiKey: '
      - lang: C#
        source: |-
          var client = new RestClient("slingshot.egoiapp.com/api/v2/webhooks?id=<string>&channel=<string>");
          client.Timeout = 30;
          var request = new RestRequest(Method.DELETE);
          request.AddHeader("ApiKey", "");
          IRestResponse response = client.Execute(request);
          Console.WriteLine(response.Content);
      - lang: Java
        source: |-
          OkHttpClient client = new OkHttpClient().newBuilder()
              .setConnectTimeout(30, TimeUnit.MILLISECONDS)
              .build();
          MediaType mediaType = MediaType.parse("text/plain");
          RequestBody body = RequestBody.create(mediaType, "");
          Request request = new Request.Builder()
              .url("slingshot.egoiapp.com/api/v2/webhooks?id=<string>&channel=<string>")
              .method("DELETE", body)
              .addHeader("ApiKey", "")
              .build();
          Response response = client.newCall(request).execute();
      - lang: JavaScript
        source: |2-

          var xhr = new XMLHttpRequest();
          xhr.withCredentials = true;

          xhr.addEventListener("readystatechange", function() {
              if(this.readyState === 4) {
                  console.log(this.responseText);
              }
          });

          xhr.open("DELETE", "slingshot.egoiapp.com/api/v2/webhooks?id=<string>&channel=<string>");
          xhr.timeout = 30;
          xhr.addEventListener("ontimeout", function(e) {
               console.log(e);
          });
          xhr.setRequestHeader("ApiKey", "");

          xhr.send();
      - lang: PHP
        source: |
          <?php

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "slingshot.egoiapp.com/api/v2/webhooks?id=<string>&channel=<string>",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_FOLLOWLOCATION => true,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                  "ApiKey: "
              ),
          ));

          $response = curl_exec($curl);

          curl_close($curl);
          echo $response;
      - lang: Python
        source: |-
          import http.client
          import mimetypes
          conn = http.client.HTTPSConnection("slingshot.egoiapp.com/api", timeout = 30)
          payload = ''
          headers = {
              'ApiKey': ''
          }
          conn.request("DELETE", "/v2/webhooks?id=<string>&channel=<string>", payload, headers)
          res = conn.getresponse()
          data = res.read()
          print(data.decode("utf-8"))
      - lang: Ruby
        source: |
          require "uri"
          require "net/http"

          url = URI("slingshot.egoiapp.com/api/v2/webhooks?id=<string>&channel=<string>")

          http = Net::HTTP.new(url.host, url.port);
          http.read_timeout = 1
          request = Net::HTTP::Delete.new(url)
          request["ApiKey"] = ""

          response = http.request(request)
          puts response.read_body
components:
  schemas:
    AlertIdResponse:
      type: object
      properties:
        alertId:
          type: string
          description: The Id of the execution of the alert.
          example: "1234"
      example:
        alertId: "1234"
    Error400:
      type: object
      properties:
        type:
          type: string
          description: The type of error, with a link to an explanation
          example: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
        title:
          type: string
          description: The title of the error
          example: Bad Request
        status:
          type: integer
          description: The code status of the error.
          format: int32
          example: 400
        detail:
          type: string
          description: A message with a finer detail.
          example: The request could not be understood by the server due to malformed
            syntax. The client should revise the request and try again.
    Alert_Email:
      title: Email
      required:
      - alertTemplateName
      - senderId
      - to
      type: object
      properties:
        alertTemplateName:
          type: string
          description: the name of the alert template to use. Already has to exist
            in the system.
          example: welcome
        senderId:
          type: string
          description: the id to identify the sender.
          example: "1234"
        to:
          type: array
          description: a list of recipients of the alert.
          items:
            $ref: '#/components/schemas/ToEmailAlertObject'
    ToEmailAlertObject:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: the email of the recipient.
          example: john-doe@email.com
        mergeTags:
          type: array
          items:
            type: string
            description: Information to be filled in a template or generic message.
            example: name:John Doe
      description: a list of recipients of the alert.
    Alert_Push:
      title: Push
      required:
      - alertTemplateName
      - to
      type: object
      properties:
        alertTemplateName:
          type: string
          description: the name of the alert template to use.
        to:
          type: array
          description: A list of the devices to send the notification.
          items:
            $ref: '#/components/schemas/ToPushAlertObject'
    JSONObject:
      type: object
      properties:
        empty:
          type: boolean
      description: Information to be filled in a template or generic message.
      example: name:John Doe
    ToPushAlertObject:
      required:
      - device
      type: object
      properties:
        device:
          type: string
          description: the device id of the recipient.
          example: john-doe@email.com
        mergeTags:
          type: array
          items:
            $ref: '#/components/schemas/ToPushAlertObject_mergeTags'
      description: the device ids to send the push message.
      example: 89ABCDEF-01234567-89ABCDEF
    Alert_Sms:
      title: Sms
      required:
      - alertTemplateName
      - senderId
      - to
      type: object
      properties:
        alertTemplateName:
          type: string
          description: the name of the alert template to use. Already has to exist
            in the system.
          example: "1234"
        senderId:
          type: string
          description: the id to identify the sender.
          example: "1234"
        to:
          type: array
          description: a list of recipients of the alert.
          items:
            $ref: '#/components/schemas/ToSmsAlertObject'
    ToSmsAlertObject:
      required:
      - phone
      type: object
      properties:
        phone:
          type: string
          description: the email of the recipient.
          example: 351-987654321
        mergeTags:
          type: array
          items:
            type: string
            description: Information to be filled in a template or generic message.
            example: name:John Doe
      description: a list of recipients of the alert.
    Error403:
      type: object
      properties:
        type:
          type: string
          description: The type of error, with a link to an explanation
          example: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
        title:
          type: string
          description: The title of the error
          example: Forbidden
        status:
          type: integer
          description: The code status of the error.
          format: int32
          example: 403
        detail:
          type: string
          description: A message with a finer detail.
          example: The server understood the request, but is refusing to fulfill it.
            The client may not have proper permissions for that request.
    Error500:
      type: object
      properties:
        type:
          type: string
          description: The type of error, with a link to an explanation
          example: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
        title:
          type: string
          description: The title of the error
          example: Internal Server Error
        status:
          type: integer
          description: The code status of the error.
          format: int32
          example: 500
        detail:
          type: string
          description: A message with a finer detail.
          example: The server encountered an unexpected condition which prevented
            it from fulfilling the request. Retry again the request in a while.
    Error401:
      type: object
      properties:
        type:
          type: string
          description: The type of error, with a link to an explanation
          example: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
        title:
          type: string
          description: The title of the error
          example: Unauthorized
        status:
          type: integer
          description: The code status of the error.
          format: int32
          example: 401
        detail:
          type: string
          description: A message with a finer detail.
          example: The request requires user authentication. Use the proper Authentication
            method and try again.
    CancelAlertRequest:
      type: object
      properties:
        alertName:
          type: string
          description: The name of the Request.
          example: "1234"
    AlertTemplateResponse:
      required:
      - interval
      - maxAttempts
      type: object
      properties:
        name:
          type: string
          description: the name to coloquially address the alert.
          example: Order Complete
        interval:
          type: integer
          description: The interval in seconds between messages to the recipient(s).
            Maximum interval is 86400 seconds (24 hours).
          format: int32
          example: 3600
        maxAttempts:
          type: integer
          description: The maximum amount of attempts to be made.
          format: int32
          example: 1
        templateId:
          type: string
          description: the id of the message template existent in the system.
          example: Order Complete
        subject:
          type: string
          description: the subject of the message. only used in email alerts.
          example: 351-987654321
        htmlBody:
          type: string
          description: the html version of the body of the message. only used in email
            alerts.
          example: <b>Your order is complete.</b> Please follow the link to stop the
            alert.
        textBody:
          type: string
          description: the text version of the message.
          example: Your order is complete. Please follow the link to stop the alert.
        channel:
          type: string
          description: the text version of the message.
          example: Your order is complete. Please follow the link to stop the alert.
      example:
        maxAttempts: 1
        htmlBody: <b>Your order is complete.</b> Please follow the link to stop the
          alert.
        subject: 351-987654321
        name: Order Complete
        channel: Your order is complete. Please follow the link to stop the alert.
        interval: 3600
        textBody: Your order is complete. Please follow the link to stop the alert.
        templateId: Order Complete
    Error404:
      type: object
      properties:
        type:
          type: string
          description: The type of error, with a link to an explanation
          example: https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
        title:
          type: string
          description: The title of the error
          example: Not Found
        status:
          type: integer
          description: The code status of the error.
          format: int32
          example: 404
        detail:
          type: string
          description: A message with a finer detail.
          example: The server has not found anything matching the Request-URI.
    AlertTemplateIdResponse:
      type: object
      properties:
        alertTemplateId:
          type: string
          description: The Id of the template of the alert.
          example: "1234"
      example:
        alertTemplateId: "1234"
    AlertTemplateRequest:
      required:
      - interval
      - maxAttempts
      type: object
      properties:
        name:
          type: string
          description: the name to coloquially address the alert.
          example: Order Complete
        interval:
          type: integer
          description: The interval in seconds between messages to the recipient(s).
            Maximum interval is 86400 seconds (24 hours).
          format: int32
          example: 3600
        maxAttempts:
          type: integer
          description: The maximum amount of attempts to be made.
          format: int32
          example: 1
        templateId:
          type: string
          description: the id of the message template existent in the system.
          example: Order Complete
        subject:
          type: string
          description: the subject of the message. only used in email alerts.
          example: 351-987654321
        htmlBody:
          type: string
          description: the html version of the body of the message. only used in email
            alerts.
          example: <b>Your order is complete.</b> Please follow the link to stop the
            alert.
        textBody:
          type: string
          description: the text version of the message.
          example: Your order is complete. Please follow the link to stop the alert.
    ValidateDomainResponse:
      type: object
      properties:
        isValid:
          type: boolean
          description: The result of the validation.
          example: true
      example:
        isValid: true
    DomainResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the domain.
          example: "1234"
        server:
          type: string
          description: The url of the server of the domain.
          example: my-business.com
        fallbackUrl:
          type: string
          description: The url to associate the domain.
          example: https://www.my-business.com
        default:
          type: boolean
      example:
        server: my-business.com
        default: true
        fallbackUrl: https://www.my-business.com
        id: "1234"
    DefaultDomainRequest:
      type: object
      properties:
        domainId:
          type: string
          description: The Domain id to default.
          example: "1234"
    DomainRequest:
      required:
      - domain
      type: object
      properties:
        default:
          type: boolean
          description: Option to set the domain as default.
          example: false
          default: false
        domain:
          type: string
          description: The Domain to add.
          example: my-business.com
        fallbackUrl:
          type: string
          description: The url to associate the domain.
          example: https://www.my-business.com
    GroupResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        channel:
          type: string
      example:
        name: name
        channel: channel
        id: id
    CompleteEmailMessageResponse:
      type: object
      properties:
        bcc:
          type: array
          items:
            type: string
        groupId:
          type: integer
          format: int32
        textBody:
          type: string
        htmlBody:
          type: string
        templateId:
          type: string
        senderId:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        createDate:
          type: string
          format: date-time
        openTracking:
          type: boolean
        cc:
          type: array
          items:
            type: string
        subject:
          type: string
        status:
          type: string
        unsubscribe:
          type: boolean
        subscriberId:
          type: integer
          format: int32
        clickTracking:
          type: boolean
        domainId:
          type: integer
          format: int32
        replyToId:
          type: integer
          format: int32
        domain:
          type: string
        name:
          type: string
        register:
          type: boolean
      example:
        cc:
        - cc
        - cc
        bcc:
        - bcc
        - bcc
        subject: subject
        replyToId: 2
        groupId: 0
        subscriberId: 5
        textBody: textBody
        openTracking: true
        templateId: templateId
        domainId: 5
        senderId: 6
        htmlBody: htmlBody
        unsubscribe: true
        domain: domain
        name: name
        id: 1
        createDate: 2000-01-23T04:56:07.000+00:00
        status: status
        clickTracking: true
        register: true
    PartialEmailMessageResponse:
      type: object
      properties:
        createDate:
          type: string
          format: date-time
        groupName:
          type: string
        subject:
          type: string
        subscriberEmail:
          type: string
        messageId:
          type: string
        senderEmail:
          type: string
      example:
        groupName: groupName
        subject: subject
        senderEmail: senderEmail
        messageId: messageId
        createDate: 2000-01-23T04:56:07.000+00:00
        subscriberEmail: subscriberEmail
    PartialSmsMessageResponse:
      type: object
      properties:
        createDate:
          type: string
          format: date-time
        subscriberMobile:
          type: string
        groupName:
          type: string
        messageId:
          type: string
        senderMobile:
          type: string
      example:
        subscriberMobile: subscriberMobile
        groupName: groupName
        messageId: messageId
        senderMobile: senderMobile
        createDate: 2000-01-23T04:56:07.000+00:00
    ErrorGenericResponse:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
    CompleteSmsMessageResponse:
      type: object
      properties:
        groupId:
          type: integer
          format: int32
        textBody:
          type: string
        templateId:
          type: integer
          format: int32
        senderId:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        createDate:
          type: string
          format: date-time
        status:
          type: string
        subscriberId:
          type: integer
          format: int32
        name:
          type: string
        register:
          type: boolean
      example:
        senderId: 1
        groupId: 0
        name: name
        subscriberId: 5
        textBody: textBody
        id: 5
        templateId: 6
        createDate: 2000-01-23T04:56:07.000+00:00
        status: status
        register: true
    MobileAppIdResponse:
      type: object
      properties:
        mobileAppId:
          type: string
          description: The Id of the Mobile App.
          example: "1234"
      example:
        mobileAppId: "1234"
    MobileAppResponse:
      required:
      - id
      - name
      - sandbox
      type: object
      properties:
        id:
          type: string
          description: The id of the App
          example: YourApp
        name:
          type: string
          description: The name of the App
          example: YourApp
        sandbox:
          type: boolean
          description: Option to send the notification in a Sandbox Environment in
            iOS devices.
          example: true
        certificate:
          type: string
          description: The certificate of the app
          example: https://example.com/certify_me.pem
        password:
          type: string
          description: The password of the certificate.
          example: "1234"
        authKey:
          type: string
          description: The authentication key to send push messages to android.
          example: "1234"
      example:
        authKey: "1234"
        password: "1234"
        name: YourApp
        sandbox: true
        certificate: https://example.com/certify_me.pem
        id: YourApp
    TemplateIdResponse:
      type: object
      properties:
        templateId:
          type: string
          description: The Id of the new Template.
          example: "1234"
      example:
        templateId: "1234"
    MobileAppRequest:
      required:
      - name
      - sandbox
      type: object
      properties:
        name:
          type: string
          description: The name of the App
          example: YourApp
        sandbox:
          type: boolean
          description: Option to send the notification in a Sandbox Environment in
            iOS devices.
          example: true
        certificate:
          type: string
          description: The certificate of the app
          example: https://example.com/certify_me.pem
        password:
          type: string
          description: The password of the certificate.
          example: "1234"
        authKey:
          type: string
          description: The authentication key to send push messages to android.
          example: "1234"
    MultiChannelFlowResponse:
      type: object
      properties:
        name:
          type: string
          description: the colloquial name to refer to the plan
          example: Welcome Cycle
        group:
          type: string
          description: the tag to group the messages
          example: welcome
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MultiChannelMessageObject'
      example:
        name: Welcome Cycle
        messages:
        - condition: none
          htmlBody: <b>Welcome to the club, {{ name }}!</b>
          subject: Welcome
          channel: email
          interval: 3600
          textBody: Welcome to the club, {{ name }}
          templateId: 1234
        - condition: none
          htmlBody: <b>Welcome to the club, {{ name }}!</b>
          subject: Welcome
          channel: email
          interval: 3600
          textBody: Welcome to the club, {{ name }}
          templateId: 1234
        group: welcome
    MultiChannelMessageObject:
      required:
      - channel
      type: object
      properties:
        channel:
          type: string
          description: Available communications channels in the API. Currently there
            are Emails and Sms.
          example: email
        interval:
          type: integer
          description: the interval in seconds between the message and the previous.
            Defaults to 3600s (1h).
          format: int32
          example: 3600
        condition:
          type: string
          description: |-
            The condition of the previous message to trigger the next one. In list of messages in the plan the condition of the first message is discarded (doesnt have previous condition). Can be:

            Name | Description | Channel
            --- | --- | ---
            none | no condition of previous message | email, sms
            not_open | previous message hasnt been opened | email
            open | previous message has been opened | email
            click | previous message has a link that has been clicked | email
            not_click | previous message has a link that has not been clicked | email
          example: none
          enum:
          - none
          - not_open
          - open
          - click
          - not_click
        templateId:
          type: integer
          description: the template id already in the system. overrides subject, textBody
            and htmlBody.
          format: int32
          example: 1234
        subject:
          type: string
          description: The subject of the message. Only applies to email messages.
          example: Welcome
        textBody:
          type: string
          description: The text body of the message.
          example: Welcome to the club, {{ name }}
        htmlBody:
          type: string
          description: The html body of the message. Only applies to email messages.
          example: <b>Welcome to the club, {{ name }}!</b>
      description: The message and its triggering condition
      example:
        condition: none
        htmlBody: <b>Welcome to the club, {{ name }}!</b>
        subject: Welcome
        channel: email
        interval: 3600
        textBody: Welcome to the club, {{ name }}
        templateId: 1234
    MultiChannelIdResponse:
      type: object
      properties:
        multiChannelId:
          type: string
          description: The Id of the template of the alert.
          example: "1234"
      example:
        multiChannelId: "1234"
    ExecuteMultiChannelRequest:
      required:
      - templateId
      type: object
      properties:
        templateId:
          type: string
          description: the id of the Multi Channel Template to be used.
          example: "1234"
        to:
          $ref: '#/components/schemas/ToMultiChannelObject'
        sender:
          $ref: '#/components/schemas/SenderMultiChannelObject'
    SenderMultiChannelObject:
      type: object
      properties:
        emailSenderId:
          type: string
          description: the email id of the sender.
          example: "1234"
        phoneSenderId:
          type: string
          description: the phone id of the sender.
          example: "1234"
      description: information about the sender.
    ToMultiChannelObject:
      type: object
      properties:
        email:
          type: string
          description: the email of the recipient.
          example: john-doe@email.com
        phone:
          type: string
          description: the phone number of the recipient.
          example: 351-987654321
        mergeTags:
          type: array
          description: A list of the merge tags to replace information gaps in the
            email. The format of each tag should be ``tagName:tagValue``
          items:
            type: string
            description: Information to be filled in a template or generic message.
            example: name:John Doe
      description: information about the recipient.
    MultiChannelFlowIdResponse:
      type: object
      properties:
        multiChannelId:
          type: string
          description: The Id of the template of the alert.
          example: "1234"
      example:
        multiChannelId: "1234"
    MultiChannelFlowRequest:
      type: object
      properties:
        name:
          type: string
          description: the colloquial name to refer to the plan
          example: Welcome Cycle
        group:
          type: string
          description: the tag to group the messages
          example: welcome
        messages:
          type: array
          description: A list of the messages in order.
          items:
            $ref: '#/components/schemas/MultiChannelMessageObject'
    SmsReportResponse:
      type: object
      properties:
        groupId:
          type: string
        groupName:
          type: string
        metricsTotal:
          type: integer
          format: int32
        metricsTotalParts:
          type: integer
          format: int32
        metricsProcessed:
          type: integer
          format: int32
        metricsSent:
          type: integer
          format: int32
        metricsSentParts:
          type: integer
          format: int32
        metricsDelivered:
          type: integer
          format: int32
        metricsDeliveredParts:
          type: integer
          format: int32
        metricsRejected:
          type: integer
          format: int32
        metricsRejectedParts:
          type: integer
          format: int32
        timePeriod:
          type: string
      example:
        metricsSent: 5
        metricsDelivered: 2
        groupName: groupName
        metricsTotal: 0
        groupId: groupId
        metricsRejectedParts: 3
        metricsTotalParts: 6
        timePeriod: timePeriod
        metricsProcessed: 1
        metricsDeliveredParts: 7
        metricsSentParts: 5
        metricsRejected: 9
    EmailReportResponse:
      type: object
      properties:
        groupId:
          type: string
        groupName:
          type: string
        viewsTotal:
          type: integer
          format: int32
        viewsUnique:
          type: integer
          format: int32
        clicksTotal:
          type: integer
          format: int32
        clicksUnique:
          type: integer
          format: int32
        metricsTotal:
          type: integer
          format: int32
        metricsProcessed:
          type: integer
          format: int32
        metricsSent:
          type: integer
          format: int32
        eventRemoved:
          type: integer
          format: int32
        eventSoftBounce:
          type: integer
          format: int32
        eventHardBounce:
          type: integer
          format: int32
        timePeriod:
          type: string
      example:
        metricsSent: 7
        eventSoftBounce: 3
        clicksUnique: 5
        groupId: groupId
        clicksTotal: 1
        metricsProcessed: 2
        viewsTotal: 0
        eventRemoved: 9
        groupName: groupName
        viewsUnique: 6
        metricsTotal: 5
        timePeriod: timePeriod
        eventHardBounce: 2
    SendMessageIdResponse:
      type: object
      properties:
        messageId:
          type: string
          description: The id of the message created.
          example: "1234"
      example:
        messageId: "1234"
    AttachmentRequest:
      required:
      - arrangement
      - data
      - filename
      - mimeType
      type: object
      properties:
        filename:
          type: string
          description: the filename of the file to go in the email.
          example: document_final
        data:
          type: string
          description: the base64 stream of information that comprises the file.
          example: wolQTkcNChoKAAAADUlIRFIAAABIAAAASAgGAAAAVcOtwrNHA
        mimeType:
          type: string
          description: the format to buuild the file for the recipient.
          example: application/pdf
        arrangement:
          type: string
          description: 'Arrangement for the Attachment inside the email. Can be either:
            "inline" (appears inside the email message body) or "attachment" (appears
            as an enclosed file).'
          example: attachment
          default: attachment
          enum:
          - attachment
          - inline
      description: The attachment to be attached in the email.
    HeaderOptionsRequest:
      required:
      - optInIpAddress
      type: object
      properties:
        listUnsubscribe:
          type: boolean
          description: gives the recipient the option to unsubscribe.
          example: true
          default: false
        optInIpAddress:
          type: string
          description: address for the recipient to subscribe to (if he so chooses).
          example: 192.168.99.100
      description: The header options of the message.
    Manual_Email:
      title: Manual
      required:
      - senderId
      - subject
      - to
      type: object
      properties:
        domain:
          type: string
          description: the Domain to de used in the sender email.
          example: e-goi.com
        senderId:
          type: string
          description: The code identification of the sender profile to be used.
          example: "1234"
        senderName:
          type: string
          description: The name to be associated with the Domain to form the email.
          example: Customer Support
        to:
          minItems: 1
          type: array
          description: The To field in the email.
          items:
            type: string
            description: The emails to send the message to.
            example: john-doe@email.com
        cc:
          type: array
          description: The Cc field in the email.
          items:
            type: string
            description: The Cc field in the email.
            example: interested-person1@email.com
        bcc:
          type: array
          description: The Bcc field in the email.
          items:
            type: string
            description: The Bcc field in the email.
            example: interested-person2@email.com
        replyToId:
          type: string
          description: The email id for if/when the recipient responds to the email.
          example: "1234"
        subject:
          type: string
          description: The subject of the message.
          example: Welcome to the Club
        htmlBody:
          type: string
          description: The html version of the body of the message.
          example: 'Hello %name%! <b>Welcome!</b> '
        textBody:
          type: string
          description: The text version of the body of the message.
          example: 'Hello %name%! Welcome! '
        openTracking:
          type: boolean
          description: The option to track if the message is opened.
          default: false
        clickTracking:
          type: boolean
          description: The option to track if the message is clicked.
          default: false
        attachment:
          type: array
          description: A list of files to be attached to the emails
          items:
            $ref: '#/components/schemas/AttachmentRequest'
        mergeTags:
          type: array
          description: A list of the merge tags to replace information gaps in the
            email. The format of each tag should be ``tagName:tagValue``
          items:
            type: string
            description: Information to be filled in a template or generic message.
            example: name:John Doe
        customData:
          type: string
          description: Extra Data related to the campaign to be re-sent via WebHook.
          example: meta-data, my relevant metadata
        priority:
          type: string
          description: The priority of the message.
          default: non-urgent
          enum:
          - urgent
          - non-urgent
        registered:
          type: boolean
          description: option to register the message. Its an exclusive feature for
            senders that require it.
          example: false
          default: false
        header:
          $ref: '#/components/schemas/HeaderOptionsRequest'
        group:
          type: string
          description: The group of the message.
          example: welcome
          default: default
    Template_Email:
      title: Template
      required:
      - senderId
      - templateId
      - to
      type: object
      properties:
        domain:
          type: string
          description: the Domain to de used in the sender email.
          example: e-goi.com
        senderId:
          type: string
          description: The code identification of the sender profile to be used.
          example: "1234"
        senderName:
          type: string
          description: The name to be associated with the Domain to form the email.
          example: Customer Support
        to:
          minItems: 1
          type: array
          description: The To field in the email.
          items:
            type: string
            description: The emails to send the message to.
            example: john-doe@email.com
        cc:
          type: array
          description: The Cc field in the email.
          items:
            type: string
            description: The Cc field in the email.
            example: interested-person1@email.com
        bcc:
          type: array
          description: The Bcc field in the email.
          items:
            type: string
            description: The Bcc field in the email.
            example: interested-person2@email.com
        replyToId:
          type: string
          description: The email id for if/when the recipient responds to the email.
          example: "1234"
        templateId:
          type: string
          description: The id of the template to use.
          example: "1234"
        attachment:
          type: array
          description: A list of files to be attached to the emails
          items:
            $ref: '#/components/schemas/AttachmentRequest'
        mergeTags:
          type: array
          description: A list of the merge tags to replace information gaps in the
            email. The format of each tag should be ``tagName:tagValue``
          items:
            type: string
            description: Information to be filled in a template or generic message.
            example: name:John Doe
        customData:
          type: string
          description: Extra Data related to the campaign to be re-sent via WebHook.
          example: meta-data, my relevant metadata
        priority:
          type: string
          description: The priority of the message.
          example: "1234"
          default: non-urgent
          enum:
          - urgent
          - non-urgent
        registered:
          type: boolean
          description: option to register the message. Its an exclusive feature for
            senders that require it.
          example: false
          default: false
        header:
          $ref: '#/components/schemas/HeaderOptionsRequest'
        group:
          type: string
          description: The group of the message.
          example: welcome
          default: default
    Manual_SMS:
      title: Manual
      required:
      - from
      - textBody
      - to
      type: object
      properties:
        to:
          type: string
          description: The contact of the recipient. format should be countryCode-phoneNumber.
          example: 351-987654321
        from:
          type: string
          description: The id of the sender.
          example: "1234"
        textBody:
          type: string
          description: The content of the message.
          example: Here's a bunch of props to you, {{ name }}, enjoy!
        encoding:
          type: string
          description: the encoding of the message.
          example: unicode
          enum:
          - unicode
          - gsm0338
        maxCount:
          minimum: 1
          type: integer
          description: the maximum amount of messages to be sent (if the textBody
            is too big for a single message).
          format: int32
          example: 1
        mergeTags:
          type: array
          description: A list of the merge tags to replace information gaps in the
            email. The format of each tag should be ``tagName:tagValue``
          items:
            type: string
            description: Information to be filled in a template or generic message.
            example: name:John Doe
        priority:
          type: string
          description: The priority of the message.
          example: non-urgent
          default: non-urgent
          enum:
          - urgent
          - non-urgent
        customData:
          type: string
          description: Extra Data related to the campaign to be re-sent via WebHook.
          example: meta-data, my relevant metadata
        registered:
          type: boolean
          description: option to register the message. Its an exclusive feature for
            senders that require it.
          example: false
          default: false
        group:
          type: string
          description: The group of the message.
          example: welcome
          default: default
    Template_SMS:
      title: Template
      required:
      - from
      - templateId
      - to
      type: object
      properties:
        to:
          type: array
          items:
            type: string
            description: The contact of the recipient. format should be countryCode-phoneNumber.
            example: 351-987654321
        from:
          type: string
          description: The id of the sender.
          example: "1234"
        templateId:
          type: string
          description: The id of the template.
          example: "1234"
        mergeTags:
          type: array
          description: A list of the merge tags to replace information gaps in the
            email. The format of each tag should be ``tagName:tagValue``
          items:
            type: string
            description: Information to be filled in a template or generic message.
            example: name:John Doe
        priority:
          type: string
          description: The priority of the message.
          example: non-urgent
          default: non-urgent
          enum:
          - urgent
          - non-urgent
        customData:
          type: string
          description: Extra Data related to the campaign to be re-sent via WebHook.
          example: meta-data, my relevant metadata
        registered:
          type: boolean
          description: option to register the message. Its an exclusive feature for
            senders that require it.
          example: false
          default: false
        group:
          type: string
          description: The group of the message.
          example: welcome
          default: default
    Manual_Push:
      title: Manual
      required:
      - appId
      - subject
      - textBody
      - to
      type: object
      properties:
        to:
          type: string
          description: The contact of the recipient. format should be countryCode-phoneNumber.
          example: "1234"
        subject:
          type: string
          description: The subject of the message.
          example: Hello World
        textBody:
          type: string
          description: The body of the message.
          example: This is an Hello to the World
        appId:
          type: integer
          description: The id of the application. Should be previously configured
            in the system.
          format: int32
          example: 1234
        custom:
          type: string
          description: Any custom information to associate the message with.
          example: This os for a test
    Template_Push:
      title: Template
      required:
      - templateId
      - to
      type: object
      properties:
        to:
          type: string
          description: The device id of the recipient.
          example: "35987654321"
        custom:
          type: string
          description: Any custom information to associate the message with.
          example: This os for a test
        templateId:
          type: string
          description: The id of the push template to replace.
          example: "1234"
    EmailSenderResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        senderStatus:
          type: string
      example:
        senderStatus: senderStatus
        name: name
        id: id
        email: email
    SmsSenderResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        phoneNumber:
          type: string
        senderStatus:
          type: string
      example:
        phoneNumber: phoneNumber
        senderStatus: senderStatus
        name: name
        id: id
    SinglePushTemplateResponse:
      required:
      - id
      - subject
      - templateName
      - textBody
      type: object
      properties:
        id:
          type: string
          description: The id of the template.
          example: Hello World
        subject:
          type: string
          description: The title of the message.
          example: Hello World
        textBody:
          type: string
          description: The text body of the message.
          example: This is a message of Hello to the World
        appId:
          type: string
          description: The id of the app to associate the template.
          example: unicode
          default: unicode
          enum:
          - unicode
          - gsm0338
        customData:
          type: string
          description: Any data to associate to the message.
          example: "1"
          default: "1"
        templateName:
          type: string
          description: The name of the template.
          example: Hello World
      example:
        templateName: Hello World
        subject: Hello World
        appId: unicode
        textBody: This is a message of Hello to the World
        customData: "1"
        id: Hello World
    PushTemplateRequest:
      required:
      - subject
      - templateName
      - textBody
      type: object
      properties:
        subject:
          type: string
          description: The title of the message.
          example: Hello World
        textBody:
          type: string
          description: The text body of the message.
          example: This is a message of Hello to the World
        appId:
          type: string
          description: The id of the app to associate the template.
          example: unicode
          default: unicode
          enum:
          - unicode
          - gsm0338
        customData:
          type: string
          description: The text body of the message.
          example: "1"
          default: "1"
        templateName:
          type: string
          description: The name of the template.
          example: Hello World
    EmailValidatorResponse:
      type: object
      properties:
        emailValid:
          type: string
          description: Email Validation Flag
          example: "true"
        emailTemporary:
          type: string
          description: Temporary Email Validation
          example: "true"
        mx:
          type: string
          description: Temporary Email Validation
          example: "true"
      example:
        emailTemporary: "true"
        emailValid: "true"
        mx: "true"
    EmailValidatorRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          description: Email Address
          example: example@example.com
        isMx:
          type: boolean
          description: Enable, disable MX validation
          example: false
        isTemporaryEmail:
          type: boolean
          description: Enable, disable MX validation
          example: false
    PingResponse:
      type: object
      properties:
        apiStatus:
          type: string
          description: The current status of the Api.
          example: Up
        date:
          type: string
          description: The date of the request.
          example: Fri Jan 17 11:20:07 WET 2020
      example:
        date: Fri Jan 17 11:20:07 WET 2020
        apiStatus: Up
    ValidatePhoneResponse:
      type: object
      properties:
        valid:
          type: boolean
        prefix:
          type: string
          description: the country code of the number to validate.
          example: "351"
        number:
          type: string
          description: The phone number to validate.
          example: "987654321"
        isValid:
          type: boolean
          description: The result of the validation.
          example: false
        message:
          type: string
          description: The message to help the user understand what happened.
          example: The number is not valid.
      example:
        valid: true
        number: "987654321"
        prefix: "351"
        isValid: false
        message: The number is not valid.
    HtmlToPdfResponse:
      type: object
      properties:
        pdfData:
          type: string
          description: Base64 PDF representation of the converted HTML
          example: <base64_string>
      example:
        pdfData: <base64_string>
    HtmlToPdfRequest:
      type: object
      properties:
        html:
          type: string
          description: Html String
          example: <html_here>
        url:
          type: string
          description: Url to the html file
          example: your_url_here
    SmsLengthCalculatorResponse:
      type: object
      properties:
        gsm0338:
          type: boolean
          description: GSM0338 message or not
          example: true
        charCount:
          type: integer
          description: Number of characters in the SMS text
          format: int32
          example: 10
        parts:
          type: integer
          description: number of parts that compose the message
          format: int32
          example: 1
        charPerMessage:
          type: integer
          description: Number of characters per message
          format: int32
          example: 30
        message:
          type: string
          description: SMS Text Message
          example: sms text message
      example:
        charCount: 10
        charPerMessage: 30
        parts: 1
        gsm0338: true
        message: sms text message
    SmsLengthCalculatorRequest:
      required:
      - gsm0338
      - message
      type: object
      properties:
        message:
          type: string
          description: SMS Text String
          example: message
        gsm0338:
          type: boolean
          description: Enable/Disable GSM0338
          example: false
    VerifyIdResponse:
      type: object
      properties:
        verifyId:
          type: string
          description: The Id of the new Template.
          example: "1234"
      example:
        verifyId: "1234"
    VerifyRequest:
      required:
      - senderId
      - to
      type: object
      properties:
        senderId:
          type: string
          description: The id of the sender.
          example: "1234"
        to:
          type: string
          description: The phone number of the recipient of the code. Format should
            be `countryCode`-`phoneNumber`
          example: 351-987654321
        message:
          type: string
          description: the message that the user is going to receive. location of
            the code should be given by using the tag {{ code }}. All instances of
            {{ code }} will be replaced with a code that is in accordance with the
            settings. If the tag is not present, the code will be added at the end
            of the message.
          example: 'To authorize the operation please introduce the following code
            code: {{ code }}'
        codeLength:
          type: integer
          description: the length of the code in characters. Maximum is 20 characters.
            Default is 6 characters.
          format: int32
          example: 6
          default: 6
        codeValidity:
          type: integer
          description: the period of time the code is valid after the message has
            been sent, in seconds. Defaults to 600 seconds (10 min). Maximum validity
            is 3600 seconds (1 hour).
          format: int32
          example: 600
          default: 600
        codeType:
          type: string
          description: |-
            the format of the code. can be:

            Format | Description | RegEx
            --- | --- | ---
            numeric | numbers | [0-9]
            alpha | letters | [A-Z]
            alphanumeric | numbers and letters | [0-9A-Z]
            hexa | numbers and letters up to F | [0-9A-F]
          example: numeric
          default: numeric
          enum:
          - numeric
          - alpha
          - alphanumeric
          - hexa
    CheckVerifyResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of the request.
          example: "1234"
        messageId:
          type: string
          description: The id of the message.
          example: "1234"
        senderId:
          type: string
          description: The id of the sender.
          example: "1234"
        recipientNumber:
          type: string
          description: The phone number of the recipient.
          example: 351-987654321
        code:
          type: string
          description: The code sent to the phone number.
          example: "1234"
        codeTTL:
          type: integer
          description: The time in seconds the code was valid.
          format: int32
          example: 600
        status:
          type: string
          description: The statues of the verify request.
          example: pending
        createDate:
          type: string
          description: The date the verify was requested.
          example: 2020-03-06T11:57:34Z
        message:
          type: string
          description: the message sent to the recipient.
          example: 'Here is your code: {CODE}'
      example:
        senderId: "1234"
        code: "1234"
        messageId: "1234"
        id: "1234"
        codeTTL: 600
        message: 'Here is your code: {CODE}'
        recipientNumber: 351-987654321
        status: pending
        createDate: 2020-03-06T11:57:34Z
    ValidateCodeVerifyRequest:
      type: object
      properties:
        code:
          type: string
          description: The Code to validate.
          example: "123456"
    GetWebhooksResponse:
      type: object
      properties:
        id:
          type: string
          description: The id of th Webhook.
          example: "1234"
        channel:
          type: string
          description: The channel of the webhook.
          example: email
          enum:
          - email
          - sms
        callbackUrl:
          type: string
          description: The url to send the event data of the webhooks.
          example: http://my-server.com
        actions:
          type: array
          items:
            type: string
            description: The actions related to the webhook.
            example: Processed
      example:
        channel: email
        callbackUrl: http://my-server.com
        id: "1234"
        actions:
        - Processed
        - Processed
    WebhookIdResponse:
      type: object
      properties:
        webhookId:
          type: string
          description: The Id of the new Webhook.
          example: "1234"
      example:
        webhookId: "1234"
    Webhook_Email:
      title: Email
      required:
      - channel
      - url
      type: object
      properties:
        url:
          type: string
          description: The url to send the Events.
          example: www.your-server/webhook/events
        channel:
          type: string
          description: The channel of the webhook.
          enum:
          - email
        actions:
          type: array
          description: A list of the actions to capture.
          items:
            type: string
            description: the action to capture.
            enum:
            - processed
            - failed
            - sent
            - canceled
            - click
            - view
            - remove
            - bounce
            - abuse
    Webhook_Push:
      title: Push
      required:
      - channel
      - url
      type: object
      properties:
        url:
          type: string
          description: The url to send the Events.
          example: www.your-server/webhook/events
        channel:
          type: string
          description: The channel of the webhook.
          enum:
          - push
        actions:
          type: array
          description: A list of the actions to capture.
          items:
            type: string
            description: the action to capture.
            enum:
            - processed
            - failed
            - sent
            - canceled
            - delivered
    Webhook_Sms:
      title: Sms
      required:
      - channel
      - url
      type: object
      properties:
        url:
          type: string
          description: The url to send the Events.
          example: www.your-server/webhook/events
        channel:
          type: string
          description: The channel of the webhook.
          enum:
          - sms
        actions:
          type: array
          description: A list of the actions to capture.
          items:
            type: string
            description: the action to capture.
            enum:
            - processed
            - failed
            - sent
            - delivered
            - canceled
    body:
      type: object
      oneOf:
      - $ref: '#/components/schemas/Alert_Email'
      - $ref: '#/components/schemas/Alert_Push'
      - $ref: '#/components/schemas/Alert_Sms'
    body_1:
      type: object
      oneOf:
      - $ref: '#/components/schemas/Webhook_Email'
      - $ref: '#/components/schemas/Webhook_Push'
      - $ref: '#/components/schemas/Webhook_Sms'
    ToPushAlertObject_mergeTags:
      type: object
      properties:
        empty:
          type: boolean
      description: Information to be filled in a template or generic message.
      example: name:John Doe
  securitySchemes:
    ApiKey:
      type: apiKey
      description: "You will need to have an account in [E-goi app](https://login.egoiapp.com/login),\
        \ \nand produce an ApiKey by \nclicking on your username (top right corner)\
        \ and selecting integrations. \n \nThen there are two ways to activate the\
        \ API Usage: \n \n* __E-goi app__ - go to Reports (on top) and select Transactional.\
        \ \n* __API Request__ - call the API method [Enable API usage](#operation/activateApi)\
        \ (in Utilities). \n \nThe ApiKey will regulate the actions of the user, depending\
        \ of its agreement with E-goi. \n \n>The ApiKey is necessary for a number\
        \ of methods, so make sure you have a valid Api Key.;"
      name: ApiKey
      in: header
      bearerFormat: <TESTAPIKEY>
x-tagGroups:
- name: WorkFlows
  tags:
  - Alerts
  - Multi-Channel
  - Verify
- name: Email
  tags:
  - Email
  - Domains
- name: Sms
  tags:
  - Sms
- name: ""
  tags:
  - Reports
  - Groups
  - Webhooks
  - Utilities
  - Senders
  - Message Information
